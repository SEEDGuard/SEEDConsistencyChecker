{"idx": 1, "sample_id": 5243791, "full_name": "sleuthkit/autopsy", "commit_id": "6130def6fda2188dcbf619612a7a1083385e233c", "src_method": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService coordinationService = CoordinationService.getInstance();\n            coordinationService.setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }", "dst_method": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService.getInstance().setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n            \n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }", "src_desc": "Obtain the case data to be updated by calling createCaseNodeData() or\nreadCaseNodeData().", "dst_desc": "Obtain\nthe case data to be updated and written by calling createCaseNodeData()\nor readCaseNodeData().", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["write", "write", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["(", "(", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [",", ",", "equal"], ["Interrupted", "Interrupted", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["try", "try", "equal"], ["{", "{", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], ["=", "", "delete"], ["Coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Instance", "Instance", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", "", "delete"], ["coordination", "", "delete"], ["<con>", "", "delete"], ["Service", "", "delete"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["(", "(", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["Category", "Category", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], [".", ".", "equal"], ["CASES", "CASES", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Directory", "Directory", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["catch", "catch", "equal"], ["(", "(", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["|", "|", "equal"], ["Coordination", "Coordination", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["ex", "ex", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Case", "Case", "equal"], ["<con>", "<con>", "equal"], ["Node", "Node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], [".", ".", "equal"], ["format", "format", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Failed", "Failed", "equal"], ["to", "to", "equal"], ["write", "write", "equal"], ["case", "case", "equal"], ["node", "node", "equal"], ["data", "data", "equal"], ["to", "to", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["node", "node", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Directory", "Directory", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["Upper", "Upper", "equal"], ["<con>", "<con>", "equal"], ["Case", "Case", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["ex", "ex", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Obtain", "the", "case", "data", "to", "be", "updated", "by", "calling", "create", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "or", "read", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "<con>", "."], "dst_desc_tokens": ["Obtain", "the", "case", "data", "to", "be", "updated", "and", "written", "by", "calling", "create", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "or", "read", "<con>", "Case", "<con>", "Node", "<con>", "Data", "<con>", "(", "<con>", ")", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4132758, "full_name": "apache/tomcat", "commit_id": "f6bb87109e2bd0660ba90a9bab9350b463a2a827", "src_method": "protected PStmtKeyCPDS createKey(final String sql) {\n        return new PStmtKeyCPDS(normalizeSQL(sql));\n    }", "dst_method": "protected PStmtKey createKey(final String sql) {\n        return new PStmtKey(normalizeSQL(sql), getCatalogOrNull());\n    }", "src_desc": "Create a {@link PStmtKeyCPDS} for the given arguments.", "dst_desc": "Creates a {@link PooledConnectionImpl.PStmtKey} for the given arguments.", "code_change_seq": [["protected", "protected", "equal"], ["P", "P", "equal"], ["<con>", "<con>", "equal"], ["Stmt", "Stmt", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "", "delete"], ["CPDS", "", "delete"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["sql", "sql", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["P", "P", "equal"], ["<con>", "<con>", "equal"], ["Stmt", "Stmt", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "", "delete"], ["CPDS", "", "delete"], ["(", "(", "equal"], ["normalize", "normalize", "equal"], ["<con>", "<con>", "equal"], ["SQL", "SQL", "equal"], ["(", "(", "equal"], ["sql", "sql", "equal"], [")", ")", "equal"], ["", ",", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Catalog", "insert"], ["", "<con>", "insert"], ["", "Or", "insert"], ["", "<con>", "insert"], ["", "Null", "insert"], ["", "(", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Create", "a", "{", "<con>", "@", "<con>", "link", "P", "<con>", "Stmt", "<con>", "Key", "<con>", "CPDS", "<con>", "}", "for", "the", "given", "arguments", "<con>", "."], "dst_desc_tokens": ["Creates", "a", "{", "<con>", "@", "<con>", "link", "Pooled", "<con>", "Connection", "<con>", "Impl", "<con>", ".", "<con>", "P", "<con>", "Stmt", "<con>", "Key", "<con>", "}", "for", "the", "given", "arguments", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4479131, "full_name": "Azure/azure-sdk-for-java", "commit_id": "22ad65dc720849293c3388eece887062089d9c9f", "src_method": "public void forceCloseHandlesAsync() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithSASToken();\n        // BEGIN: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n        directoryAsyncClient.listHandles(10, true)\n            .subscribe(handleItem -> directoryAsyncClient.forceCloseHandles(handleItem.getHandleId(), true)\n                .subscribe(numOfClosedHandles -> System.out.printf(\"Closed %d handles.\", numOfClosedHandles)));\n        // END: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n    }", "dst_method": "public void forceCloseAllHandles() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithConnectionString();\n        // BEGIN: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n        directoryAsyncClient.forceCloseAllHandles(true).subscribe(numberOfHandlesClosed ->\n            System.out.printf(\"Closed %d open handles on the directory%n\", numberOfHandlesClosed));\n        // END: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n    }", "src_desc": "Generates a code sample for using {@link DirectoryAsyncClient#forceCloseHandles(String, boolean)}", "dst_desc": "Code snippet for {@link DirectoryAsyncClient#forceCloseAllHandles(boolean)}.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["force", "force", "equal"], ["<con>", "<con>", "equal"], ["Close", "Close", "equal"], ["<con>", "<con>", "equal"], ["", "All", "insert"], ["", "<con>", "insert"], ["Handles", "Handles", "equal"], ["<con>", "", "delete"], ["Async", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Directory", "Directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["=", "=", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["SAS", "Connection", "replace"], ["<con>", "<con>", "equal"], ["Token", "String", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["", "force", "insert"], ["", "<con>", "insert"], ["", "Close", "insert"], ["", "<con>", "insert"], ["list", "All", "replace"], ["<con>", "<con>", "equal"], ["Handles", "Handles", "equal"], ["(", "(", "equal"], ["10", "", "delete"], [",", "", "delete"], ["true", "true", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["subscribe", "subscribe", "equal"], ["(", "(", "equal"], ["handle", "", "delete"], ["<con>", "", "delete"], ["Item", "", "delete"], ["->", "", "delete"], ["directory", "", "delete"], ["<con>", "", "delete"], ["Async", "", "delete"], ["<con>", "", "delete"], ["Client", "", "delete"], [".", "", "delete"], ["force", "", "delete"], ["<con>", "", "delete"], ["Close", "", "delete"], ["<con>", "", "delete"], ["Handles", "", "delete"], ["(", "", "delete"], ["handle", "", "delete"], ["<con>", "", "delete"], ["Item", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Handle", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [",", "", "delete"], ["true", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["subscribe", "", "delete"], ["(", "", "delete"], ["num", "number", "replace"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["<con>", "<con>", "equal"], ["", "Handles", "insert"], ["", "<con>", "insert"], ["Closed", "Closed", "equal"], ["<con>", "", "delete"], ["Handles", "", "delete"], ["->", "->", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Closed", "Closed", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["d", "d", "equal"], ["", "open", "insert"], ["handles", "handles", "equal"], ["", "on", "insert"], ["", "the", "insert"], ["", "directory", "insert"], ["<con>", "<con>", "equal"], [".", "%", "replace"], ["", "<con>", "insert"], ["", "n", "insert"], ["\"", "\"", "equal"], [",", ",", "equal"], ["num", "number", "replace"], ["<con>", "<con>", "equal"], ["Of", "Of", "equal"], ["<con>", "<con>", "equal"], ["", "Handles", "insert"], ["", "<con>", "insert"], ["Closed", "Closed", "equal"], ["<con>", "", "delete"], ["Handles", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "force", "<con>", "Close", "<con>", "Handles", "<con>", "(", "<con>", "String", "<con>", ",", "boolean", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["Code", "snippet", "for", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "force", "<con>", "Close", "<con>", "All", "<con>", "Handles", "<con>", "(", "<con>", "boolean", "<con>", ")", "<con>", "}", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 1742442, "full_name": "danfickle/openhtmltopdf", "commit_id": "d9095a86d825fe2dd803c67f457e151eeb7ff953", "src_method": "public final TFinalClass useProtocolsStreamImplementation(HttpStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}", "dst_method": "public final TFinalClass useProtocolsStreamImplementation(FSStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}", "src_desc": "Provides an {@link com.openhtmltopdf.extend.HttpStreamFactory}\nimplementation if the user desires to use an external\nstream provider for a particular list of protocols.", "dst_desc": "Provides an {@link com.openhtmltopdf.extend.FSStreamFactory}\nimplementation if the user desires to use an external\nstream provider for a particular list of protocols.", "code_change_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["T", "T", "equal"], ["<con>", "<con>", "equal"], ["Final", "Final", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["use", "use", "equal"], ["<con>", "<con>", "equal"], ["Protocols", "Protocols", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["<con>", "<con>", "equal"], ["Implementation", "Implementation", "equal"], ["(", "(", "equal"], ["Http", "FS", "replace"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["factory", "factory", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["...", "...", "equal"], ["protocols", "protocols", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["protocol", "protocol", "equal"], [":", ":", "equal"], ["protocols", "protocols", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["state", "state", "equal"], [".", ".", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["stream", "stream", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["protocol", "protocol", "equal"], [",", ",", "equal"], ["factory", "factory", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["(", "(", "equal"], ["T", "T", "equal"], ["<con>", "<con>", "equal"], ["Final", "Final", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [")", ")", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Provides", "an", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "openhtmltopdf", "<con>", ".", "<con>", "extend", "<con>", ".", "<con>", "Http", "<con>", "Stream", "<con>", "Factory", "<con>", "}", "implementation", "if", "the", "user", "desires", "to", "use", "an", "external", "stream", "provider", "for", "a", "particular", "list", "of", "protocols", "<con>", "."], "dst_desc_tokens": ["Provides", "an", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "openhtmltopdf", "<con>", ".", "<con>", "extend", "<con>", ".", "<con>", "FS", "<con>", "Stream", "<con>", "Factory", "<con>", "}", "implementation", "if", "the", "user", "desires", "to", "use", "an", "external", "stream", "provider", "for", "a", "particular", "list", "of", "protocols", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 5315975, "full_name": "spring-projects/spring-framework", "commit_id": "a532afb15d298f2114d6072f0d29138c89bda04f", "src_method": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeMillis = System.currentTimeMillis();\n\t}", "dst_method": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeNanos = System.nanoTime();\n\t}", "src_desc": "The results are undefined if {@link #stop()}\nor timing methods are called without invoking this method.", "dst_desc": "The results are undefined if {@link #stop()} or timing methods are\ncalled without invoking this method first.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["start", "start", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["task", "task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["State", "State", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["current", "current", "equal"], ["<con>", "<con>", "equal"], ["Task", "Task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["State", "State", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Can", "Can", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["start", "start", "equal"], ["Stop", "Stop", "equal"], ["<con>", "<con>", "equal"], ["Watch", "Watch", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["it", "it", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["already", "already", "equal"], ["running", "running", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["current", "current", "equal"], ["<con>", "<con>", "equal"], ["Task", "Task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["=", "=", "equal"], ["task", "task", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["start", "start", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "<con>", "equal"], ["Millis", "Nanos", "replace"], ["=", "=", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["current", "nano", "replace"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["<con>", "", "delete"], ["Millis", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["The", "results", "are", "undefined", "if", "{", "<con>", "@", "<con>", "link", "#", "<con>", "stop", "<con>", "(", "<con>", ")", "<con>", "}", "or", "timing", "methods", "are", "called", "without", "invoking", "this", "method", "<con>", "."], "dst_desc_tokens": ["The", "results", "are", "undefined", "if", "{", "<con>", "@", "<con>", "link", "#", "<con>", "stop", "<con>", "(", "<con>", ")", "<con>", "}", "or", "timing", "methods", "are", "called", "without", "invoking", "this", "method", "first", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5764055, "full_name": "JabRef/jabref", "commit_id": "164843bd45eb6fec25367a6246e661862ed38c5e", "src_method": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n        return result;\n    }", "dst_method": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        matcher = SHORT_DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        return result;\n    }", "src_desc": "Tries to find a DOI inside the given text.", "dst_desc": "Tries to find a DOI/Short DOI inside the given text.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Optional", "Optional", "equal"], ["<", "<", "equal"], ["DOI", "DOI", "equal"], [">", ">", "equal"], ["find", "find", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Text", "Text", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["text", "text", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Optional", "Optional", "equal"], ["<", "<", "equal"], ["DOI", "DOI", "equal"], [">", ">", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["Optional", "Optional", "equal"], [".", ".", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Matcher", "Matcher", "equal"], ["matcher", "matcher", "equal"], ["=", "=", "equal"], ["DOI", "DOI", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["PATT", "PATT", "equal"], [".", ".", "equal"], ["matcher", "matcher", "equal"], ["(", "(", "equal"], ["text", "text", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["matcher", "matcher", "equal"], [".", ".", "equal"], ["find", "find", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["Optional", "Optional", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["DOI", "DOI", "equal"], ["(", "(", "equal"], ["matcher", "matcher", "equal"], [".", ".", "equal"], ["group", "group", "equal"], ["(", "(", "equal"], ["1", "1", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "matcher", "insert"], ["", "=", "insert"], ["", "SHORT", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "DOI", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "PATT", "insert"], ["", ".", "insert"], ["", "matcher", "insert"], ["", "(", "insert"], ["", "text", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "matcher", "insert"], ["", ".", "insert"], ["", "find", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "result", "insert"], ["", "=", "insert"], ["", "Optional", "insert"], ["", ".", "insert"], ["", "of", "insert"], ["", "(", "insert"], ["", "new", "insert"], ["", "DOI", "insert"], ["", "(", "insert"], ["", "matcher", "insert"], ["", ".", "insert"], ["", "group", "insert"], ["", "(", "insert"], ["", "1", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["return", "return", "equal"], ["result", "result", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Tries", "to", "find", "a", "DOI", "inside", "the", "given", "text", "<con>", "."], "dst_desc_tokens": ["Tries", "to", "find", "a", "DOI", "<con>", "/", "<con>", "Short", "DOI", "inside", "the", "given", "text", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 3731867, "full_name": "typetools/checker-framework", "commit_id": "8d5bc03a386a67470619714fea7f186ba587d52a", "src_method": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        boolean defaultTypeVarLocals =\n                (atypeFactory instanceof GenericAnnotatedTypeFactory<?, ?, ?, ?>)\n                        && ((GenericAnnotatedTypeFactory<?, ?, ?, ?>) atypeFactory)\n                                .getShouldDefaultTypeVarLocals();\n        applyToTypeVar =\n                defaultTypeVarLocals\n                        && elt != null\n                        && elt.getKind() == ElementKind.LOCAL_VARIABLE\n                        && type.getKind() == TypeKind.TYPEVAR;\n        applyDefaultsElement(elt, type);\n        applyToTypeVar = false;\n    }", "dst_method": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            case CLASS:\n                if (((ClassTree) tree).getExtendsClause() != null) {\n                    Element extendsElt =\n                            TreeUtils.elementFromTree(((ClassTree) tree).getExtendsClause());\n                    applyDefaultsToElement(extendsElt, type);\n                }\n                for (Tree implicitClause : ((ClassTree) tree).getImplementsClause()) {\n                    Element implementsElt = TreeUtils.elementFromTree(implicitClause);\n                    applyDefaultsToElement(implementsElt, type);\n                }\n                elt = nearestEnclosingExceptLocal(tree);\n                break;\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        applyDefaultsToElement(elt, type);\n    }", "src_desc": "A {@link com.sun.source.tree.Tree} that determines the\nappropriate scope for defaults.", "dst_desc": "A {@link com.sun.source.tree.Tree} determines the\nappropriate scope for defaults.", "code_change_seq": [["private", "private", "equal"], ["void", "void", "equal"], ["apply", "apply", "equal"], ["<con>", "<con>", "equal"], ["Defaults", "Defaults", "equal"], ["(", "(", "equal"], ["Tree", "Tree", "equal"], ["tree", "tree", "equal"], [",", ",", "equal"], ["Annotated", "Annotated", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["<con>", "<con>", "equal"], ["Mirror", "Mirror", "equal"], ["type", "type", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Element", "Element", "equal"], ["elt", "elt", "equal"], [";", ";", "equal"], ["switch", "switch", "equal"], ["(", "(", "equal"], ["tree", "tree", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Kind", "Kind", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["case", "case", "equal"], ["MEMBER", "MEMBER", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["SELECT", "SELECT", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Member", "Member", "equal"], ["<con>", "<con>", "equal"], ["Select", "Select", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["IDENTIFIER", "IDENTIFIER", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Identifier", "Identifier", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["case", "case", "equal"], ["METHOD", "METHOD", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["INVOCATION", "INVOCATION", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["Tree", "Tree", "equal"], ["<con>", "<con>", "equal"], ["Utils", "Utils", "equal"], [".", ".", "equal"], ["element", "element", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["Use", "Use", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Invocation", "Invocation", "equal"], ["<con>", "<con>", "equal"], ["Tree", "Tree", "equal"], [")", ")", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["break", "break", "equal"], [";", ";", "equal"], ["", "case", "insert"], ["", "CLASS", "insert"], ["", ":", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Extends", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "Element", "insert"], ["", "extends", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", "=", "insert"], ["", "Tree", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], ["", ".", "insert"], ["", "element", "insert"], ["", "<con>", "insert"], ["", "From", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Extends", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "apply", "insert"], ["", "<con>", "insert"], ["", "Defaults", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "<con>", "insert"], ["", "Element", "insert"], ["", "(", "insert"], ["", "extends", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", ",", "insert"], ["", "type", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "for", "insert"], ["", "(", "insert"], ["", "Tree", "insert"], ["", "implicit", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", ":", "insert"], ["", "(", "insert"], ["", "(", "insert"], ["", "Class", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", ")", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Implements", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "Element", "insert"], ["", "implements", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", "=", "insert"], ["", "Tree", "insert"], ["", "<con>", "insert"], ["", "Utils", "insert"], ["", ".", "insert"], ["", "element", "insert"], ["", "<con>", "insert"], ["", "From", "insert"], ["", "<con>", "insert"], ["", "Tree", "insert"], ["", "(", "insert"], ["", "implicit", "insert"], ["", "<con>", "insert"], ["", "Clause", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "apply", "insert"], ["", "<con>", "insert"], ["", "Defaults", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "<con>", "insert"], ["", "Element", "insert"], ["", "(", "insert"], ["", "implements", "insert"], ["", "<con>", "insert"], ["", "Elt", "insert"], ["", ",", "insert"], ["", "type", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "elt", "insert"], ["", "=", "insert"], ["", "nearest", "insert"], ["", "<con>", "insert"], ["", "Enclosing", "insert"], ["", "<con>", "insert"], ["", "Except", "insert"], ["", "<con>", "insert"], ["", "Local", "insert"], ["", "(", "insert"], ["", "tree", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "break", "insert"], ["", ";", "insert"], ["default", "default", "equal"], [":", ":", "equal"], ["elt", "elt", "equal"], ["=", "=", "equal"], ["nearest", "nearest", "equal"], ["<con>", "<con>", "equal"], ["Enclosing", "Enclosing", "equal"], ["<con>", "<con>", "equal"], ["Except", "Except", "equal"], ["<con>", "<con>", "equal"], ["Local", "Local", "equal"], ["(", "(", "equal"], ["tree", "tree", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["boolean", "", "delete"], ["default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["=", "", "delete"], ["(", "", "delete"], ["atype", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["instanceof", "", "delete"], ["Generic", "", "delete"], ["<con>", "", "delete"], ["Annotated", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["<", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [">", "", "delete"], [")", "", "delete"], ["&&", "", "delete"], ["(", "", "delete"], ["(", "", "delete"], ["Generic", "", "delete"], ["<con>", "", "delete"], ["Annotated", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["<", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [",", "", "delete"], ["?", "", "delete"], [">", "", "delete"], [")", "", "delete"], ["atype", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Should", "", "delete"], ["<con>", "", "delete"], ["Default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["apply", "", "delete"], ["<con>", "", "delete"], ["To", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["=", "", "delete"], ["default", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["<con>", "", "delete"], ["Locals", "", "delete"], ["&&", "", "delete"], ["elt", "", "delete"], ["!=", "", "delete"], ["null", "", "delete"], ["&&", "", "delete"], ["elt", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], ["(", "", "delete"], [")", "", "delete"], ["==", "", "delete"], ["Element", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], [".", "", "delete"], ["LOCAL", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["VARIABLE", "", "delete"], ["&&", "", "delete"], ["type", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], ["(", "", "delete"], [")", "", "delete"], ["==", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Kind", "", "delete"], [".", "", "delete"], ["TYPEVAR", "", "delete"], [";", "", "delete"], ["apply", "apply", "equal"], ["<con>", "<con>", "equal"], ["Defaults", "Defaults", "equal"], ["<con>", "<con>", "equal"], ["", "To", "insert"], ["", "<con>", "insert"], ["Element", "Element", "equal"], ["(", "(", "equal"], ["elt", "elt", "equal"], [",", ",", "equal"], ["type", "type", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["apply", "", "delete"], ["<con>", "", "delete"], ["To", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Var", "", "delete"], ["=", "", "delete"], ["false", "", "delete"], [";", "", "delete"], ["}", "}", "equal"]], "src_desc_tokens": ["A", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "sun", "<con>", ".", "<con>", "source", "<con>", ".", "<con>", "tree", "<con>", ".", "<con>", "Tree", "<con>", "}", "that", "determines", "the", "appropriate", "scope", "for", "defaults", "<con>", "."], "dst_desc_tokens": ["A", "{", "<con>", "@", "<con>", "link", "com", "<con>", ".", "<con>", "sun", "<con>", ".", "<con>", "source", "<con>", ".", "<con>", "tree", "<con>", ".", "<con>", "Tree", "<con>", "}", "determines", "the", "appropriate", "scope", "for", "defaults", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4478939, "full_name": "Azure/azure-sdk-for-java", "commit_id": "4486ee01367850a4d96845886b58af4cedb63bff", "src_method": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n        StorageServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n    }", "dst_method": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n        QueueServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n    }", "src_desc": "Generates a code sample for using {@link QueueServiceAsyncClient#setPropertiesWithResponse(StorageServiceProperties)}\nwith metrics enabled.", "dst_desc": "Generates a code sample for using {@link QueueServiceAsyncClient#setPropertiesWithResponse(QueueServiceProperties)}\nwith metrics enabled.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Enable", "Enable", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Storage", "Queue", "replace"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["properties", "properties", "equal"], ["=", "=", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["block", "block", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["properties", "properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Minute", "Minute", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["properties", "properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Hour", "Hour", "equal"], ["<con>", "<con>", "equal"], ["Metrics", "Metrics", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["properties", "properties", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["subscribe", "subscribe", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], ["->", "->", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Setting", "Setting", "equal"], ["Queue", "Queue", "equal"], ["service", "service", "equal"], ["properties", "properties", "equal"], ["completed", "completed", "equal"], ["with", "with", "equal"], ["status", "status", "equal"], ["code", "code", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["d", "d", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Status", "Status", "equal"], ["<con>", "<con>", "equal"], ["Code", "Code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "set", "<con>", "Properties", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "Storage", "<con>", "Service", "<con>", "Properties", "<con>", ")", "<con>", "}", "with", "metrics", "enabled", "<con>", "."], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "set", "<con>", "Properties", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "Queue", "<con>", "Service", "<con>", "Properties", "<con>", ")", "<con>", "}", "with", "metrics", "enabled", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5630312, "full_name": "watson-developer-cloud/java-sdk", "commit_id": "c44118e6766c0927c12a84f79c78197ae886b253", "src_method": "public void setOrganizationUrl(final String organizationUrl) {\n    this.organizationUrl = organizationUrl;\n  }", "dst_method": "public Builder organizationUrl(String organizationUrl) {\n      this.organizationUrl = organizationUrl;\n      return this;\n    }", "src_desc": "Sets the organizationUrl.", "dst_desc": "Set the organizationUrl.", "code_change_seq": [["public", "public", "equal"], ["void", "Builder", "replace"], ["set", "", "delete"], ["<con>", "", "delete"], ["Organization", "organization", "replace"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], ["(", "(", "equal"], ["final", "", "delete"], ["String", "String", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], ["=", "=", "equal"], ["organization", "organization", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", "this", "insert"], ["", ";", "insert"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "organization", "<con>", "Url", "<con>", "."], "dst_desc_tokens": ["Set", "the", "organization", "<con>", "Url", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5454152, "full_name": "unofficial-openjdk/openjdk", "commit_id": "e51f5b986c729b517e9522b6591c7e9248e7e091", "src_method": "public SourceLocator getLocator() {\n        return locator;\n    }", "dst_method": "public SourceLocator getLocator() {\n        return this.locator;\n    }", "src_desc": "Method getLocator retrieves an instance of a SourceLocator\nobject that specifies where an error occured.", "dst_desc": "Method getLocator retrieves an instance of a SourceLocator\nobject that specifies where an error occurred.", "code_change_seq": [["public", "public", "equal"], ["Source", "Source", "equal"], ["<con>", "<con>", "equal"], ["Locator", "Locator", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Locator", "Locator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["", "this", "insert"], ["", ".", "insert"], ["locator", "locator", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Method", "get", "<con>", "Locator", "retrieves", "an", "instance", "of", "a", "Source", "<con>", "Locator", "object", "that", "specifies", "where", "an", "error", "occured", "<con>", "."], "dst_desc_tokens": ["Method", "get", "<con>", "Locator", "retrieves", "an", "instance", "of", "a", "Source", "<con>", "Locator", "object", "that", "specifies", "where", "an", "error", "occurred", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 2243531, "full_name": "HotswapProjects/HotswapAgent", "commit_id": "5655fb63d928ff74702894d112a752f94ff77aa6", "src_method": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.proxy.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }", "dst_method": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.command.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }", "src_desc": "Delegates loadClass to org.hotswap.agent.plugin.deltaspike.proxy.ProxyClassLoadingDelegate::loadClass", "dst_desc": "Delegates loadClass to org.hotswap.agent.plugin.deltaspike.command.ProxyClassLoadingDelegate::loadClass", "code_change_seq": [["@", "@", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Load", "Load", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["class", "class", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["<con>", "<con>", "equal"], ["Regexp", "Regexp", "equal"], ["=", "=", "equal"], ["\"", "\"", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["apache", "apache", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "proxy", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["impl", "impl", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["public", "public", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["patch", "patch", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["(", "(", "equal"], ["Ct", "Ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["ct", "ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Found", "Found", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [",", ",", "equal"], ["Cannot", "Cannot", "equal"], ["<con>", "<con>", "equal"], ["Compile", "Compile", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["Ct", "Ct", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["=", "=", "equal"], ["ct", "ct", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Declared", "Declared", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["generate", "generate", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], [".", ".", "equal"], ["instrument", "instrument", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Expr", "Expr", "equal"], ["<con>", "<con>", "equal"], ["Editor", "Editor", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["edit", "edit", "equal"], ["(", "(", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Call", "Call", "equal"], ["m", "m", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Cannot", "Cannot", "equal"], ["<con>", "<con>", "equal"], ["Compile", "Compile", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["apache", "apache", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "proxy", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["impl", "impl", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Asm", "Asm", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Generator", "Generator", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["&&", "&&", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Method", "Method", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["equals", "equals", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["load", "load", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["m", "m", "equal"], [".", ".", "equal"], ["replace", "replace", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["{", "{", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["=", "=", "equal"], ["org", "org", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["hotswap", "hotswap", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["agent", "agent", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["plugin", "plugin", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["deltaspike", "deltaspike", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["proxy", "command", "replace"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["Proxy", "Proxy", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Loading", "Loading", "equal"], ["<con>", "<con>", "equal"], ["Delegate", "Delegate", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["<con>", "<con>", "equal"], ["load", "load", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["(", "(", "equal"], ["<con>", "<con>", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], ["$", "$", "equal"], ["<con>", "<con>", "equal"], [")", ")", "equal"], ["<con>", "<con>", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Delegates", "load", "<con>", "Class", "to", "org", "<con>", ".", "<con>", "hotswap", "<con>", ".", "<con>", "agent", "<con>", ".", "<con>", "plugin", "<con>", ".", "<con>", "deltaspike", "<con>", ".", "<con>", "proxy", "<con>", ".", "<con>", "Proxy", "<con>", "Class", "<con>", "Loading", "<con>", "Delegate", "<con>", ":", "<con>", ":", "<con>", "load", "<con>", "Class"], "dst_desc_tokens": ["Delegates", "load", "<con>", "Class", "to", "org", "<con>", ".", "<con>", "hotswap", "<con>", ".", "<con>", "agent", "<con>", ".", "<con>", "plugin", "<con>", ".", "<con>", "deltaspike", "<con>", ".", "<con>", "command", "<con>", ".", "<con>", "Proxy", "<con>", "Class", "<con>", "Loading", "<con>", "Delegate", "<con>", ":", "<con>", ":", "<con>", "load", "<con>", "Class"], "label": true}
{"idx": 3, "sample_id": 4484195, "full_name": "Azure/azure-sdk-for-java", "commit_id": "45a5bdd0509a7ea1dbebf4410a53c436461a0612", "src_method": "public VoidResponse abortCopyWithResponse(String copyId, Context context) {\n        return fileAsyncClient.abortCopyWithResponse(copyId, context).block();\n    }", "dst_method": "public VoidResponse abortCopyWithResponse(String copyId, Duration timeout, Context context) {\n        Mono<VoidResponse> response = fileAsyncClient.abortCopyWithResponse(copyId, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "src_desc": "{@codesnippet com.azure.storage.file.fileClient.abortCopyWithResponse#string-Context}", "dst_desc": "{@codesnippet com.azure.storage.file.fileClient.abortCopyWithResponse#string-duration-context}", "code_change_seq": [["public", "public", "equal"], ["Void", "Void", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["abort", "abort", "equal"], ["<con>", "<con>", "equal"], ["Copy", "Copy", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["copy", "copy", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["", "Duration", "insert"], ["", "timeout", "insert"], ["", ",", "insert"], ["Context", "Context", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "Mono", "replace"], ["", "<", "insert"], ["", "Void", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["", ">", "insert"], ["", "response", "insert"], ["", "=", "insert"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["abort", "abort", "equal"], ["<con>", "<con>", "equal"], ["Copy", "Copy", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["copy", "copy", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["", ";", "insert"], ["", "return", "insert"], ["", "Utility", "insert"], [".", ".", "equal"], ["block", "block", "equal"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Optional", "insert"], ["", "<con>", "insert"], ["", "Timeout", "insert"], ["(", "(", "equal"], ["", "response", "insert"], ["", ",", "insert"], ["", "timeout", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "storage", "<con>", ".", "<con>", "file", "<con>", ".", "<con>", "file", "<con>", "Client", "<con>", ".", "<con>", "abort", "<con>", "Copy", "<con>", "With", "<con>", "Response", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "Context", "<con>", "}"], "dst_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "storage", "<con>", ".", "<con>", "file", "<con>", ".", "<con>", "file", "<con>", "Client", "<con>", ".", "<con>", "abort", "<con>", "Copy", "<con>", "With", "<con>", "Response", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "duration", "<con>", "-", "<con>", "context", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 2443444, "full_name": "jersey/jersey", "commit_id": "7947149f959e6103a7a9cfc1906f943cd8c86090", "src_method": "public static InjectionManager createInjectionManager(String name, Binder... binders) {\n        return _injectionManager(name, null, binders);\n    }", "dst_method": "public static InjectionManager createInjectionManager(Binder binder) {\n        return lookupInjectionManagerFactory().create(binder);\n    }", "src_desc": "Create a {@link InjectionManager}.", "dst_desc": "Creates a {@link InjectionManager} with initial binder that is immediately registered.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["Injection", "Injection", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Injection", "Injection", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["(", "(", "equal"], ["String", "", "delete"], ["name", "", "delete"], [",", "", "delete"], ["Binder", "Binder", "equal"], ["...", "", "delete"], ["binders", "binder", "replace"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["_", "lookup", "replace"], ["<con>", "<con>", "equal"], ["injection", "Injection", "replace"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], ["", "<con>", "insert"], ["", "Factory", "insert"], ["(", "(", "equal"], ["name", ")", "replace"], [",", ".", "replace"], ["null", "create", "replace"], [",", "(", "replace"], ["binders", "binder", "replace"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Create", "a", "{", "<con>", "@", "<con>", "link", "Injection", "<con>", "Manager", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Creates", "a", "{", "<con>", "@", "<con>", "link", "Injection", "<con>", "Manager", "<con>", "}", "with", "initial", "binder", "that", "is", "immediately", "registered", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 4470113, "full_name": "Azure/azure-sdk-for-java", "commit_id": "0c7b98449768de9d61397b0cc53ef05c234ff3ef", "src_method": "public Flux<FeedResponse<CosmosUserProperties>> readAllUsers(FeedOptions options) {\n        return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n            CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n    }", "dst_method": "public CosmosContinuablePagedFlux<CosmosUserProperties> readAllUsers(FeedOptions options) {\n        return new CosmosContinuablePagedFlux<>(pagedFluxOptions -> {\n            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n            return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n                CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n        });\n    }", "src_desc": "The {@link Flux} will\ncontain one or several feed response of the read cosmos users.", "dst_desc": "The {@link CosmosContinuablePagedFlux} will\ncontain one or several feed response of the read cosmos users.", "code_change_seq": [["public", "public", "equal"], ["Flux", "", "delete"], ["<", "", "delete"], ["Feed", "Cosmos", "replace"], ["<con>", "<con>", "equal"], ["Response", "Continuable", "replace"], ["", "<con>", "insert"], ["", "Paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["<", "<", "equal"], ["Cosmos", "Cosmos", "equal"], ["<con>", "<con>", "equal"], ["User", "User", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], [">", "", "delete"], [">", ">", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["<con>", "<con>", "equal"], ["Users", "Users", "equal"], ["(", "(", "equal"], ["Feed", "Feed", "equal"], ["<con>", "<con>", "equal"], ["Options", "Options", "equal"], ["options", "options", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "return", "insert"], ["", "new", "insert"], ["", "Cosmos", "insert"], ["", "<con>", "insert"], ["", "Continuable", "insert"], ["", "<con>", "insert"], ["", "Paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<", "insert"], ["", ">", "insert"], ["", "(", "insert"], ["", "paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<con>", "insert"], ["", "Options", "insert"], ["", "->", "insert"], ["", "{", "insert"], ["", "set", "insert"], ["", "<con>", "insert"], ["", "Continuation", "insert"], ["", "<con>", "insert"], ["", "Token", "insert"], ["", "<con>", "insert"], ["", "And", "insert"], ["", "<con>", "insert"], ["", "Max", "insert"], ["", "<con>", "insert"], ["", "Item", "insert"], ["", "<con>", "insert"], ["", "Count", "insert"], ["", "(", "insert"], ["", "paged", "insert"], ["", "<con>", "insert"], ["", "Flux", "insert"], ["", "<con>", "insert"], ["", "Options", "insert"], ["", ",", "insert"], ["", "options", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["return", "return", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Doc", "Doc", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["Wrapper", "Wrapper", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["read", "read", "equal"], ["<con>", "<con>", "equal"], ["Users", "Users", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Link", "Link", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["options", "options", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["map", "map", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], ["->", "->", "equal"], ["Bridge", "Bridge", "equal"], ["<con>", "<con>", "equal"], ["Internal", "Internal", "equal"], [".", ".", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Feed", "Feed", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["Cosmos", "Cosmos", "equal"], ["<con>", "<con>", "equal"], ["User", "User", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["From", "From", "equal"], ["<con>", "<con>", "equal"], ["V2", "V2", "equal"], ["<con>", "<con>", "equal"], ["Results", "Results", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Results", "Results", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"]], "src_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Flux", "<con>", "}", "will", "contain", "one", "or", "several", "feed", "response", "of", "the", "read", "cosmos", "users", "<con>", "."], "dst_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Cosmos", "<con>", "Continuable", "<con>", "Paged", "<con>", "Flux", "<con>", "}", "will", "contain", "one", "or", "several", "feed", "response", "of", "the", "read", "cosmos", "users", "<con>", "."], "label": true}
{"idx": 3, "sample_id": 4478865, "full_name": "Azure/azure-sdk-for-java", "commit_id": "4486ee01367850a4d96845886b58af4cedb63bff", "src_method": "public Response<Void> setPropertiesWithResponse(StorageServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "dst_method": "public Response<Void> setPropertiesWithResponse(QueueServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "src_desc": "To disable all CORS in the Queue service pass an empty list for {@link StorageServiceProperties#getCors()\nCORS}.", "dst_desc": "To disable all CORS in the Queue service pass an empty list for {@link QueueServiceProperties#getCors()\nCORS}.", "code_change_seq": [["public", "public", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Void", "Void", "equal"], [">", ">", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["Storage", "Queue", "replace"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["properties", "properties", "equal"], [",", ",", "equal"], ["Duration", "Duration", "equal"], ["timeout", "timeout", "equal"], [",", ",", "equal"], ["Context", "Context", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Mono", "Mono", "equal"], ["<", "<", "equal"], ["Response", "Response", "equal"], ["<", "<", "equal"], ["Void", "Void", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["response", "response", "equal"], ["=", "=", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Properties", "Properties", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["properties", "properties", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["Utility", "Utility", "equal"], [".", ".", "equal"], ["block", "block", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Optional", "Optional", "equal"], ["<con>", "<con>", "equal"], ["Timeout", "Timeout", "equal"], ["(", "(", "equal"], ["response", "response", "equal"], [",", ",", "equal"], ["timeout", "timeout", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["To", "disable", "all", "CORS", "in", "the", "Queue", "service", "pass", "an", "empty", "list", "for", "{", "<con>", "@", "<con>", "link", "Storage", "<con>", "Service", "<con>", "Properties", "<con>", "#", "<con>", "get", "<con>", "Cors", "<con>", "(", "<con>", ")", "CORS", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["To", "disable", "all", "CORS", "in", "the", "Queue", "service", "pass", "an", "empty", "list", "for", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Service", "<con>", "Properties", "<con>", "#", "<con>", "get", "<con>", "Cors", "<con>", "(", "<con>", ")", "CORS", "<con>", "}", "<con>", "."], "label": true}
{"idx": 11, "sample_id": 5441275, "full_name": "unofficial-openjdk/openjdk", "commit_id": "82717914de8cd0cc8fd4576f0e421948466bcfaf", "src_method": "public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeout++;\n        }\n\n        wait(timeout);\n    }", "dst_method": "public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis < 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }", "src_desc": "If {@code timeout} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.", "dst_desc": "If {@code timeoutMillis} and {@code nanos}\nare both zero, then real time is not taken into consideration and the\nthread waits until awakened by one of the other causes.", "code_change_seq": [["public", "public", "equal"], ["final", "final", "equal"], ["void", "void", "equal"], ["wait", "wait", "equal"], ["(", "(", "equal"], ["long", "long", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], [",", ",", "equal"], ["int", "int", "equal"], ["nanos", "nanos", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Interrupted", "Interrupted", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["<", "<", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["value", "value", "equal"], ["is", "is", "equal"], ["negative", "negative", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nanos", "nanos", "equal"], ["<", "<", "equal"], ["0", "0", "equal"], ["||", "||", "equal"], ["nanos", "nanos", "equal"], [">", ">", "equal"], ["999999", "999999", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["nanosecond", "nanosecond", "equal"], ["timeout", "timeout", "equal"], ["value", "value", "equal"], ["out", "out", "equal"], ["of", "of", "equal"], ["range", "range", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["nanos", "nanos", "equal"], [">", ">", "equal"], ["0", "0", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], ["++", "++", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["wait", "wait", "equal"], ["(", "(", "equal"], ["timeout", "timeout", "equal"], ["", "<con>", "insert"], ["", "Millis", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["If", "{", "<con>", "@", "<con>", "code", "timeout", "<con>", "}", "and", "{", "<con>", "@", "<con>", "code", "nanos", "<con>", "}", "are", "both", "zero", "<con>", ",", "then", "real", "time", "is", "not", "taken", "into", "consideration", "and", "the", "thread", "waits", "until", "awakened", "by", "one", "of", "the", "other", "causes", "<con>", "."], "dst_desc_tokens": ["If", "{", "<con>", "@", "<con>", "code", "timeout", "<con>", "Millis", "<con>", "}", "and", "{", "<con>", "@", "<con>", "code", "nanos", "<con>", "}", "are", "both", "zero", "<con>", ",", "then", "real", "time", "is", "not", "taken", "into", "consideration", "and", "the", "thread", "waits", "until", "awakened", "by", "one", "of", "the", "other", "causes", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 23303, "full_name": "adempiere/adempiere", "commit_id": "a1cb4ea65411955663074a759d0f374d1d9347be", "src_method": "protected boolean isProjectAccounting() {\n\t\treturn isProjectAccounting;\n\t}", "dst_method": "protected boolean isUseProjectDimension() {\n\t\treturn isUseProjectDimension;\n\t}", "src_desc": "Getter Parameter Value for isProjectAccounting", "dst_desc": "Getter Parameter Value for Project Accounting", "code_change_seq": [["protected", "protected", "equal"], ["boolean", "boolean", "equal"], ["is", "is", "equal"], ["", "<con>", "insert"], ["", "Use", "insert"], ["<con>", "<con>", "equal"], ["Project", "Project", "equal"], ["<con>", "<con>", "equal"], ["Accounting", "Dimension", "replace"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["is", "is", "equal"], ["", "<con>", "insert"], ["", "Use", "insert"], ["<con>", "<con>", "equal"], ["Project", "Project", "equal"], ["<con>", "<con>", "equal"], ["Accounting", "Dimension", "replace"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Getter", "Parameter", "Value", "for", "is", "<con>", "Project", "<con>", "Accounting"], "dst_desc_tokens": ["Getter", "Parameter", "Value", "for", "Project", "Accounting"], "label": true}
{"idx": 0, "sample_id": 2017735, "full_name": "google/closure-compiler", "commit_id": "393ec71775db7c35e4d3abf4b9eea85d97a54134", "src_method": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }", "dst_method": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    if (parentSource.getConstructor() != null && parentSource.getConstructor().isAbstract()) {\n      return parentSource.getConstructor().getOwnImplementedInterfaces();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }", "src_desc": "Returns the secondary parents of this property map, for interfaces that\nneed multiple inheritance.", "dst_desc": "Returns the secondary parents of this property map, for interfaces that need multiple\ninheritance or for interfaces of abstract classes.", "code_change_seq": [["private", "private", "equal"], ["Iterable", "Iterable", "equal"], ["<", "<", "equal"], ["Object", "Object", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Secondary", "Secondary", "equal"], ["<con>", "<con>", "equal"], ["Parent", "Parent", "equal"], ["<con>", "<con>", "equal"], ["Objects", "Objects", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["parent", "parent", "equal"], ["<con>", "<con>", "equal"], ["Source", "Source", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Immutable", "Immutable", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", "&&", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "Abstract", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "return", "insert"], ["", "parent", "insert"], ["", "<con>", "insert"], ["", "Source", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Constructor", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Own", "insert"], ["", "<con>", "insert"], ["", "Implemented", "insert"], ["", "<con>", "insert"], ["", "Interfaces", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["return", "return", "equal"], ["parent", "parent", "equal"], ["<con>", "<con>", "equal"], ["Source", "Source", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Ctor", "Ctor", "equal"], ["<con>", "<con>", "equal"], ["Extended", "Extended", "equal"], ["<con>", "<con>", "equal"], ["Interfaces", "Interfaces", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Returns", "the", "secondary", "parents", "of", "this", "property", "map", "<con>", ",", "for", "interfaces", "that", "need", "multiple", "inheritance", "<con>", "."], "dst_desc_tokens": ["Returns", "the", "secondary", "parents", "of", "this", "property", "map", "<con>", ",", "for", "interfaces", "that", "need", "multiple", "inheritance", "or", "for", "interfaces", "of", "abstract", "classes", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 5845329, "full_name": "JetBrains/android", "commit_id": "666069caadbc2b6847a807349792e9c65d6b4c88", "src_method": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    return new File(dirPath, FN_BUILD_GRADLE);\n  }", "dst_method": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    File defaultBuildFile = new File(dirPath, FN_BUILD_GRADLE);\n    if (!defaultBuildFile.isFile()) {\n      File ktsBuildFile = new File(dirPath, FN_BUILD_GRADLE_KTS);\n      if (ktsBuildFile.isFile()) {\n        return ktsBuildFile;\n      }\n    }\n    return defaultBuildFile;\n  }", "src_desc": "Please note that a build.gradle file\nmay not exist at the returned path.", "dst_desc": "Please note that the build.gradle file may not exist at the returned path.", "code_change_seq": [["@", "@", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["public", "public", "equal"], ["static", "static", "equal"], ["File", "File", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Gradle", "Gradle", "equal"], ["<con>", "<con>", "equal"], ["Build", "Build", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["File", "File", "equal"], ["dir", "dir", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "File", "replace"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "=", "insert"], ["new", "new", "equal"], ["File", "File", "equal"], ["(", "(", "equal"], ["dir", "dir", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [",", ",", "equal"], ["FN", "FN", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["BUILD", "BUILD", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["GRADLE", "GRADLE", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "if", "insert"], ["", "(", "insert"], ["", "!", "insert"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "File", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "=", "insert"], ["", "new", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", "dir", "insert"], ["", "<con>", "insert"], ["", "Path", "insert"], ["", ",", "insert"], ["", "FN", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "BUILD", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "GRADLE", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "KTS", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ".", "insert"], ["", "is", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "return", "insert"], ["", "kts", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ";", "insert"], ["}", "}", "equal"], ["", "}", "insert"], ["", "return", "insert"], ["", "default", "insert"], ["", "<con>", "insert"], ["", "Build", "insert"], ["", "<con>", "insert"], ["", "File", "insert"], ["", ";", "insert"], ["", "}", "insert"]], "src_desc_tokens": ["Please", "note", "that", "a", "build", "<con>", ".", "<con>", "gradle", "file", "may", "not", "exist", "at", "the", "returned", "path", "<con>", "."], "dst_desc_tokens": ["Please", "note", "that", "the", "build", "<con>", ".", "<con>", "gradle", "file", "may", "not", "exist", "at", "the", "returned", "path", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5630307, "full_name": "watson-developer-cloud/java-sdk", "commit_id": "c44118e6766c0927c12a84f79c78197ae886b253", "src_method": "public void setPassword(final String password) {\n    this.password = password;\n  }", "dst_method": "public Builder password(String password) {\n      this.password = password;\n      return this;\n    }", "src_desc": "Sets the password.", "dst_desc": "Set the password.", "code_change_seq": [["public", "public", "equal"], ["void", "Builder", "replace"], ["set", "", "delete"], ["<con>", "", "delete"], ["Password", "password", "replace"], ["(", "(", "equal"], ["final", "", "delete"], ["String", "String", "equal"], ["password", "password", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["password", "password", "equal"], ["=", "=", "equal"], ["password", "password", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", "this", "insert"], ["", ";", "insert"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "password", "<con>", "."], "dst_desc_tokens": ["Set", "the", "password", "<con>", "."], "label": true}
{"idx": 2, "sample_id": 2544923, "full_name": "JOML-CI/JOML", "commit_id": "efad7e910edfb265ca1f3c46415446ad71de0932", "src_method": "public Matrix4d setTranslation(Vector3d xyz) {\r\n        return setTranslation(xyz.x, xyz.y, xyz.z);\r\n    }", "dst_method": "public Matrix4d setTranslation(Vector3dc xyz) {\r\n        return setTranslation(xyz.x(), xyz.y(), xyz.z());\r\n    }", "src_desc": "To apply a translation, use {@link #translate(Vector3d)}.", "dst_desc": "To apply a translation, use {@link #translate(Vector3dc)}.", "code_change_seq": [["public", "public", "equal"], ["Matrix4d", "Matrix4d", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Translation", "Translation", "equal"], ["(", "(", "equal"], ["Vector3d", "Vector3dc", "replace"], ["xyz", "xyz", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Translation", "Translation", "equal"], ["(", "(", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["x", "x", "equal"], ["", "(", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["y", "y", "equal"], ["", "(", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["xyz", "xyz", "equal"], [".", ".", "equal"], ["z", "z", "equal"], ["", "(", "insert"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["To", "apply", "a", "translation", "<con>", ",", "use", "{", "<con>", "@", "<con>", "link", "#", "<con>", "translate", "<con>", "(", "<con>", "Vector3d", "<con>", ")", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["To", "apply", "a", "translation", "<con>", ",", "use", "{", "<con>", "@", "<con>", "link", "#", "<con>", "translate", "<con>", "(", "<con>", "Vector3dc", "<con>", ")", "<con>", "}", "<con>", "."], "label": true}
{"idx": 1, "sample_id": 5321662, "full_name": "spring-projects/spring-framework", "commit_id": "86c861516d55c69bae0150271c1a10d40afa726e", "src_method": "public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}", "dst_method": "public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}", "src_desc": "Prefixes are used to enrich the mappings of every {@code @RequestMapping}\nmethod whose controller type is matched by the corresponding\n{@link HandlerTypePredicate}.", "dst_desc": "Prefixes are used to enrich the mappings of every {@code @RequestMapping}\nmethod whose controller type is matched by the corresponding\n{@code Predicate}.", "code_change_seq": [["public", "public", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Match", "Match", "equal"], ["<con>", "<con>", "equal"], ["Configurer", "Configurer", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["<con>", "<con>", "equal"], ["Prefix", "Prefix", "equal"], ["(", "(", "equal"], ["String", "String", "equal"], ["prefix", "prefix", "equal"], [",", ",", "equal"], ["Handler", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], ["<con>", "", "delete"], ["Predicate", "Predicate", "equal"], ["", "<", "insert"], ["", "Class", "insert"], ["", "<", "insert"], ["", "?", "insert"], ["", ">", "insert"], ["", ">", "insert"], ["predicate", "predicate", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], ["=", "=", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [":", ":", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["<con>", "<con>", "equal"], ["Prefixes", "Prefixes", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["prefix", "prefix", "equal"], [",", ",", "equal"], ["predicate", "predicate", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Prefixes", "are", "used", "to", "enrich", "the", "mappings", "of", "every", "{", "<con>", "@", "<con>", "code", "@", "<con>", "Request", "<con>", "Mapping", "<con>", "}", "method", "whose", "controller", "type", "is", "matched", "by", "the", "corresponding", "{", "<con>", "@", "<con>", "link", "Handler", "<con>", "Type", "<con>", "Predicate", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Prefixes", "are", "used", "to", "enrich", "the", "mappings", "of", "every", "{", "<con>", "@", "<con>", "code", "@", "<con>", "Request", "<con>", "Mapping", "<con>", "}", "method", "whose", "controller", "type", "is", "matched", "by", "the", "corresponding", "{", "<con>", "@", "<con>", "code", "Predicate", "<con>", "}", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 3037775, "full_name": "opennetworkinglab/onos", "commit_id": "cc0012423b77cd2f4a77ecd10eecce25e28ed06f", "src_method": "@Test\n    public void resilencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.cost(), is((double) 180));\n    }", "dst_method": "@Test\n    public void resiliencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.weight(), is(ScalarWeight.toWeight(180.0)));\n    }", "src_desc": "Tests resilency when D2 device availability is changed.", "dst_desc": "Tests resiliency when D2 device availability is changed.", "code_change_seq": [["@", "@", "equal"], ["Test", "Test", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["resilency", "resiliency", "replace"], ["<con>", "<con>", "equal"], ["Test11", "Test11", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["build4", "build4", "equal"], ["<con>", "<con>", "equal"], ["Router", "Router", "equal"], ["<con>", "<con>", "equal"], ["Topo", "Topo", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["false", "false", "equal"], [",", ",", "equal"], ["10", "10", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Constraint", "Constraint", "equal"], [">", ">", "equal"], ["constraints", "constraints", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Constraint", "Constraint", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Cost", "Cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["cost", "cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Cost", "Cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["(", "(", "equal"], ["COST", "COST", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["constraints", "constraints", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["cost", "cost", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Pce", "Pce", "equal"], ["<con>", "<con>", "equal"], ["Bandwidth", "Bandwidth", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["local", "local", "equal"], ["<con>", "<con>", "equal"], ["Bw", "Bw", "equal"], ["<con>", "<con>", "equal"], ["Const", "Const", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Pce", "Pce", "equal"], ["<con>", "<con>", "equal"], ["Bandwidth", "Bandwidth", "equal"], ["<con>", "<con>", "equal"], ["Constraint", "Constraint", "equal"], ["(", "(", "equal"], ["Bandwidth", "Bandwidth", "equal"], [".", ".", "equal"], ["bps", "bps", "equal"], ["(", "(", "equal"], ["10", "10", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["constraints", "constraints", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["local", "local", "equal"], ["<con>", "<con>", "equal"], ["Bw", "Bw", "equal"], ["<con>", "<con>", "equal"], ["Const", "Const", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["boolean", "boolean", "equal"], ["result", "result", "equal"], ["=", "=", "equal"], ["pce", "pce", "equal"], ["<con>", "<con>", "equal"], ["Manager", "Manager", "equal"], [".", ".", "equal"], ["setup", "setup", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], ["D1", "D1", "equal"], [".", ".", "equal"], ["device", "device", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["D4", "D4", "equal"], [".", ".", "equal"], ["device", "device", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["T123", "T123", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["constraints", "constraints", "equal"], [",", ",", "equal"], ["WITH", "WITH", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["SIGNALLING", "SIGNALLING", "equal"], [",", ",", "equal"], ["null", "null", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["result", "result", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["true", "true", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Event", "Event", "equal"], [">", ">", "equal"], ["reasons", "reasons", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["LINK", "LINK", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["REMOVED", "REMOVED", "equal"], [",", ",", "equal"], ["link1", "link1", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["reasons", "reasons", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Link", "Link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["LINK", "LINK", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["REMOVED", "REMOVED", "equal"], [",", ",", "equal"], ["link2", "link2", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["reasons", "reasons", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link", "link", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["event", "event", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], ["(", "(", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Event", "Event", "equal"], [".", ".", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["TOPOLOGY", "TOPOLOGY", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["CHANGED", "CHANGED", "equal"], [",", ",", "equal"], ["topology", "topology", "equal"], [",", ",", "equal"], ["reasons", "reasons", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], [">", ">", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], ["(", "(", "equal"], ["D1", "D1", "equal"], [",", ",", "equal"], ["D2", "D2", "equal"], [",", ",", "equal"], ["link1", "link1", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Edge", "Edge", "equal"], ["(", "(", "equal"], ["D2", "D2", "equal"], [",", ",", "equal"], ["D4", "D4", "equal"], [",", ",", "equal"], ["link2", "link2", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Topology", "Topology", "equal"], ["<con>", "<con>", "equal"], ["Vertex", "Vertex", "equal"], [">", ">", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Hash", "Hash", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["D2", "D2", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["topology", "topology", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["change", "change", "equal"], ["<con>", "<con>", "equal"], ["In", "In", "equal"], ["<con>", "<con>", "equal"], ["Topology", "Topology", "equal"], ["(", "(", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Graph", "Graph", "equal"], ["(", "(", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Vertexes", "Vertexes", "equal"], [",", ",", "equal"], ["temp", "temp", "equal"], ["<con>", "<con>", "equal"], ["Edges", "Edges", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["listener", "listener", "equal"], [".", ".", "equal"], ["event", "event", "equal"], ["(", "(", "equal"], ["event", "event", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], ["Link", "Link", "equal"], [">", ">", "equal"], ["links", "links", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Linked", "Linked", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["<", "<", "equal"], [">", ">", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["links", "links", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link3", "link3", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["links", "links", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["(", "(", "equal"], ["link4", "link4", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Path", "Path", "equal"], ["path", "path", "equal"], ["=", "=", "equal"], ["tunnel", "tunnel", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], [".", ".", "equal"], ["query", "query", "equal"], ["<con>", "<con>", "equal"], ["All", "All", "equal"], ["<con>", "<con>", "equal"], ["Tunnels", "Tunnels", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["iterator", "iterator", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["next", "next", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["path", "path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [".", ".", "equal"], ["links", "links", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["links", "links", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["That", "That", "equal"], ["(", "(", "equal"], ["path", "path", "equal"], [".", ".", "equal"], ["cost", "weight", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["is", "is", "equal"], ["(", "(", "equal"], ["(", "Scalar", "replace"], ["", "<con>", "insert"], ["", "Weight", "insert"], ["double", ".", "replace"], [")", "to", "replace"], ["", "<con>", "insert"], ["", "Weight", "insert"], ["180", "(", "replace"], ["", "180.0", "insert"], ["", ")", "insert"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Tests", "resilency", "when", "D2", "device", "availability", "is", "changed", "<con>", "."], "dst_desc_tokens": ["Tests", "resiliency", "when", "D2", "device", "availability", "is", "changed", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4482155, "full_name": "Azure/azure-sdk-for-java", "commit_id": "06e58a516ccb93390c94cbd47210e96f93ff7ed0", "src_method": "public SpecializedBlobClientBuilder containerAsyncClient(ContainerAsyncClient containerAsyncClient,\n        String blobName) {\n        pipeline(containerAsyncClient.getHttpPipeline());\n        endpoint(containerAsyncClient.getContainerUrl().toString());\n        blobName(blobName);\n        this.customerProvidedKey = containerAsyncClient.getCustomerProvidedKey();\n        return this;\n    }", "dst_method": "public SpecializedBlobClientBuilder containerAsyncClient(BlobContainerAsyncClient blobContainerAsyncClient,\n        String blobName) {\n        pipeline(blobContainerAsyncClient.getHttpPipeline());\n        endpoint(blobContainerAsyncClient.getBlobContainerUrl().toString());\n        blobName(blobName);\n        this.customerProvidedKey = blobContainerAsyncClient.getCustomerProvidedKey();\n        return this;\n    }", "src_desc": "Configures the builder based on the {@link ContainerAsyncClient} and appends the blob name to the container's\nURL.", "dst_desc": "Configures the builder based on the {@link BlobContainerAsyncClient} and appends the blob name to the container's\nURL.", "code_change_seq": [["public", "public", "equal"], ["Specialized", "Specialized", "equal"], ["<con>", "<con>", "equal"], ["Blob", "Blob", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["Builder", "Builder", "equal"], ["container", "container", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["(", "(", "equal"], ["", "Blob", "insert"], ["", "<con>", "insert"], ["Container", "Container", "equal"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["", "blob", "insert"], ["", "<con>", "insert"], ["container", "Container", "replace"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["blob", "blob", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["pipeline", "pipeline", "equal"], ["(", "(", "equal"], ["", "blob", "insert"], ["", "<con>", "insert"], ["container", "Container", "replace"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Http", "Http", "equal"], ["<con>", "<con>", "equal"], ["Pipeline", "Pipeline", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["endpoint", "endpoint", "equal"], ["(", "(", "equal"], ["", "blob", "insert"], ["", "<con>", "insert"], ["container", "Container", "replace"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["", "<con>", "insert"], ["", "Blob", "insert"], ["<con>", "<con>", "equal"], ["Container", "Container", "equal"], ["<con>", "<con>", "equal"], ["Url", "Url", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["String", "String", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["blob", "blob", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], ["(", "(", "equal"], ["blob", "blob", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["customer", "customer", "equal"], ["<con>", "<con>", "equal"], ["Provided", "Provided", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["=", "=", "equal"], ["", "blob", "insert"], ["", "<con>", "insert"], ["container", "Container", "replace"], ["<con>", "<con>", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Customer", "Customer", "equal"], ["<con>", "<con>", "equal"], ["Provided", "Provided", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Configures", "the", "builder", "based", "on", "the", "{", "<con>", "@", "<con>", "link", "Container", "<con>", "Async", "<con>", "Client", "<con>", "}", "and", "appends", "the", "blob", "name", "to", "the", "container", "<con>", "'", "<con>", "s", "URL", "<con>", "."], "dst_desc_tokens": ["Configures", "the", "builder", "based", "on", "the", "{", "<con>", "@", "<con>", "link", "Blob", "<con>", "Container", "<con>", "Async", "<con>", "Client", "<con>", "}", "and", "appends", "the", "blob", "name", "to", "the", "container", "<con>", "'", "<con>", "s", "URL", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 5824363, "full_name": "jdbi/jdbi", "commit_id": "693a1b653d71158575f8b93e7433b9c10e7f8aa2", "src_method": "@Beta\n    public This defineBinds() {\n        return configure(SqlStatements.class, s ->\n            s.setTemplateEngine(new DefineBindsTemplateEngine(s.getTemplateEngine())));\n    }", "dst_method": "@Beta\n    public This defineNamedBindings(DefineNamedBindingMode mode) {\n        return configure(SqlStatements.class, s ->\n            s.setTemplateEngine(new DefineNamedBindingsTemplateEngine(mode, s.getTemplateEngine())));\n    }", "src_desc": "Define all bound arguments that don't already have a definition.", "dst_desc": "Define all bound arguments that don't already have a definition with the given defining mode.", "code_change_seq": [["@", "@", "equal"], ["Beta", "Beta", "equal"], ["public", "public", "equal"], ["This", "This", "equal"], ["define", "define", "equal"], ["<con>", "<con>", "equal"], ["", "Named", "insert"], ["", "<con>", "insert"], ["Binds", "Bindings", "replace"], ["(", "(", "equal"], ["", "Define", "insert"], ["", "<con>", "insert"], ["", "Named", "insert"], ["", "<con>", "insert"], ["", "Binding", "insert"], ["", "<con>", "insert"], ["", "Mode", "insert"], ["", "mode", "insert"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["configure", "configure", "equal"], ["(", "(", "equal"], ["Sql", "Sql", "equal"], ["<con>", "<con>", "equal"], ["Statements", "Statements", "equal"], [".", ".", "equal"], ["class", "class", "equal"], [",", ",", "equal"], ["s", "s", "equal"], ["->", "->", "equal"], ["s", "s", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Template", "Template", "equal"], ["<con>", "<con>", "equal"], ["Engine", "Engine", "equal"], ["(", "(", "equal"], ["new", "new", "equal"], ["Define", "Define", "equal"], ["<con>", "<con>", "equal"], ["", "Named", "insert"], ["", "<con>", "insert"], ["Binds", "Bindings", "replace"], ["<con>", "<con>", "equal"], ["Template", "Template", "equal"], ["<con>", "<con>", "equal"], ["Engine", "Engine", "equal"], ["(", "(", "equal"], ["", "mode", "insert"], ["", ",", "insert"], ["s", "s", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Template", "Template", "equal"], ["<con>", "<con>", "equal"], ["Engine", "Engine", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Define", "all", "bound", "arguments", "that", "don", "<con>", "'", "<con>", "t", "already", "have", "a", "definition", "<con>", "."], "dst_desc_tokens": ["Define", "all", "bound", "arguments", "that", "don", "<con>", "'", "<con>", "t", "already", "have", "a", "definition", "with", "the", "given", "defining", "mode", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4490839, "full_name": "Azure/azure-sdk-for-java", "commit_id": "64efc1beab68e85f4a07dd05d076e1ce941f8135", "src_method": "public void createFileAsyncMaxOverload() {\n        FileAsyncClient fileAsyncClient = createAsyncClientWithSASToken();\n        // BEGIN: com.azure.storage.file.fileAsyncClient.create#long-filehttpheaders-map\n        FileHTTPHeaders httpHeaders = new FileHTTPHeaders().fileContentType(\"text/plain\");\n        fileAsyncClient.create(1024, httpHeaders, Collections.singletonMap(\"file\", \"updatedMetadata\"))\n            .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n                response.statusCode()));\n        // END: com.azure.storage.file.fileAsyncClient.create#long-filehttpheaders-map\n    }", "dst_method": "public void createWithResponse() {\n        FileClient fileClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.fileClient.createWithResponse#long-filehttpheaders-map-Context\n        FileHTTPHeaders httpHeaders = new FileHTTPHeaders().fileContentType(\"text/plain\");\n        Response<FileInfo> response = fileClient.createWithResponse(1024, httpHeaders,\n            Collections.singletonMap(\"file\", \"updatedMetadata\"), new Context(key1, value1));\n        System.out.printf(\"Creating the file completed with status code %d\", response.statusCode());\n        // END: com.azure.storage.file.fileClient.createWithResponse#long-filehttpheaders-map-Context\n    }", "src_desc": "Generates a code sample for using {@link FileAsyncClient#create(long, FileHTTPHeaders, Map)}", "dst_desc": "Generates a code sample for using {@link FileClient#createWithResponse(long, FileHTTPHeaders, Map, Context)}", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["File", "With", "replace"], ["<con>", "<con>", "equal"], ["Async", "Response", "replace"], ["<con>", "", "delete"], ["Max", "", "delete"], ["<con>", "", "delete"], ["Overload", "", "delete"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["Async", "", "delete"], ["<con>", "", "delete"], ["Client", "Client", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Async", "", "delete"], ["<con>", "", "delete"], ["Client", "Client", "equal"], ["=", "=", "equal"], ["create", "create", "equal"], ["<con>", "", "delete"], ["Async", "", "delete"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["SAS", "SAS", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["HTTP", "HTTP", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["HTTP", "HTTP", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Content", "Content", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["text", "text", "equal"], ["<con>", "<con>", "equal"], ["/", "/", "equal"], ["<con>", "<con>", "equal"], ["plain", "plain", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["", "Response", "insert"], ["", "<", "insert"], ["", "File", "insert"], ["", "<con>", "insert"], ["", "Info", "insert"], ["", ">", "insert"], ["", "response", "insert"], ["", "=", "insert"], ["file", "file", "equal"], ["<con>", "<con>", "equal"], ["Async", "", "delete"], ["<con>", "", "delete"], ["Client", "Client", "equal"], [".", ".", "equal"], ["create", "create", "equal"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["(", "(", "equal"], ["1024", "1024", "equal"], [",", ",", "equal"], ["http", "http", "equal"], ["<con>", "<con>", "equal"], ["Headers", "Headers", "equal"], [",", ",", "equal"], ["Collections", "Collections", "equal"], [".", ".", "equal"], ["singleton", "singleton", "equal"], ["<con>", "<con>", "equal"], ["Map", "Map", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["file", "file", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["\"", "\"", "equal"], ["updated", "updated", "equal"], ["<con>", "<con>", "equal"], ["Metadata", "Metadata", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["", ",", "insert"], ["", "new", "insert"], ["", "Context", "insert"], ["", "(", "insert"], ["", "key1", "insert"], ["", ",", "insert"], ["", "value1", "insert"], [")", ")", "equal"], [".", ")", "replace"], ["subscribe", ";", "replace"], ["(", "", "delete"], ["response", "", "delete"], ["->", "", "delete"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Creating", "Creating", "equal"], ["the", "the", "equal"], ["file", "file", "equal"], ["completed", "completed", "equal"], ["with", "with", "equal"], ["status", "status", "equal"], ["code", "code", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["d", "d", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["status", "status", "equal"], ["<con>", "<con>", "equal"], ["Code", "Code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [")", "", "delete"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "File", "<con>", "Async", "<con>", "Client", "<con>", "#", "<con>", "create", "<con>", "(", "<con>", "long", "<con>", ",", "File", "<con>", "HTTP", "<con>", "Headers", "<con>", ",", "Map", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "File", "<con>", "Client", "<con>", "#", "<con>", "create", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "long", "<con>", ",", "File", "<con>", "HTTP", "<con>", "Headers", "<con>", ",", "Map", "<con>", ",", "Context", "<con>", ")", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 91198, "full_name": "alexruiz/fest-assert-2.x", "commit_id": "715a0f9b59a084df983f74f3e715cded3333f60d", "src_method": "public void assertNotNull(AssertionInfo info, Object actual) {\r\n    if (actual != null) {\r\n      return;\r\n    }\r\n    throw failures.failure(info, shouldNotBeNull());\r\n  }", "dst_method": "public void assertNotNull(Description description, Object actual) {\r\n    if (actual == null) {\r\n      throw failures.failure(description, new BasicErrorMessageFactory(\"expecting actual value to be non-null\"));\r\n    }\r\n  }", "src_desc": "Asserts that the given object is not {@code null}.", "dst_desc": "Asserts that the actual object is not {@code null}.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["(", "(", "equal"], ["Assertion", "Description", "replace"], ["<con>", "", "delete"], ["Info", "", "delete"], ["info", "description", "replace"], [",", ",", "equal"], ["Object", "Object", "equal"], ["actual", "actual", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["actual", "actual", "equal"], ["!=", "==", "replace"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["throw", "throw", "equal"], ["failures", "failures", "equal"], [".", ".", "equal"], ["failure", "failure", "equal"], ["(", "(", "equal"], ["info", "description", "replace"], [",", ",", "equal"], ["", "new", "insert"], ["should", "Basic", "replace"], ["<con>", "<con>", "equal"], ["Not", "Error", "replace"], ["<con>", "<con>", "equal"], ["Be", "Message", "replace"], ["<con>", "<con>", "equal"], ["Null", "Factory", "replace"], ["(", "(", "equal"], ["", "\"", "insert"], ["", "expecting", "insert"], ["", "actual", "insert"], ["", "value", "insert"], ["", "to", "insert"], ["", "be", "insert"], ["", "non", "insert"], ["", "<con>", "insert"], ["", "-", "insert"], ["", "<con>", "insert"], ["", "null", "insert"], ["", "\"", "insert"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "}", "insert"]], "src_desc_tokens": ["Asserts", "that", "the", "given", "object", "is", "not", "{", "<con>", "@", "<con>", "code", "null", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Asserts", "that", "the", "actual", "object", "is", "not", "{", "<con>", "@", "<con>", "code", "null", "<con>", "}", "<con>", "."], "label": true}
{"idx": 7, "sample_id": 4483197, "full_name": "Azure/azure-sdk-for-java", "commit_id": "b200de98fb927f7cfd411e917f05bbadc250f308", "src_method": "public VoidResponse purgeDeletedSecret(String name, Context context) {\n        return client.purgeDeletedSecret(name, context).block();\n    }", "dst_method": "public Response<Void> purgeDeletedSecretWithResponse(String name, Context context) {\n        return client.purgeDeletedSecretWithResponse(name, context).block();\n    }", "src_desc": "{@codesnippet com.azure.security.keyvault.secretclient.purgeDeletedSecret#string-Context}", "dst_desc": "{@codesnippet com.azure.security.keyvault.secretclient.purgeDeletedSecretWithResponse#string-Context}", "code_change_seq": [["public", "public", "equal"], ["Void", "", "delete"], ["<con>", "", "delete"], ["Response", "Response", "equal"], ["purge", "<", "replace"], ["<con>", "", "delete"], ["Deleted", "", "delete"], ["<con>", "", "delete"], ["Secret", "", "delete"], ["", "Void", "insert"], ["", ">", "insert"], ["", "purge", "insert"], ["", "<con>", "insert"], ["", "Deleted", "insert"], ["", "<con>", "insert"], ["", "Secret", "insert"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["(", "(", "equal"], ["String", "String", "equal"], ["name", "name", "equal"], [",", ",", "equal"], ["Context", "Context", "equal"], ["context", "context", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["client", "client", "equal"], [".", ".", "equal"], ["purge", "purge", "equal"], ["<con>", "<con>", "equal"], ["Deleted", "Deleted", "equal"], ["<con>", "<con>", "equal"], ["Secret", "Secret", "equal"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["(", "(", "equal"], ["name", "name", "equal"], [",", ",", "equal"], ["context", "context", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["block", "block", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "security", "<con>", ".", "<con>", "keyvault", "<con>", ".", "<con>", "secretclient", "<con>", ".", "<con>", "purge", "<con>", "Deleted", "<con>", "Secret", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "Context", "<con>", "}"], "dst_desc_tokens": ["{", "<con>", "@", "<con>", "codesnippet", "com", "<con>", ".", "<con>", "azure", "<con>", ".", "<con>", "security", "<con>", ".", "<con>", "keyvault", "<con>", ".", "<con>", "secretclient", "<con>", ".", "<con>", "purge", "<con>", "Deleted", "<con>", "Secret", "<con>", "With", "<con>", "Response", "<con>", "#", "<con>", "string", "<con>", "-", "<con>", "Context", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 6104852, "full_name": "LWJGL/lwjgl3", "commit_id": "ff0420c6682e83fe7d993f4b70843e338479b179", "src_method": "public BGFXTransientVertexBuffer decl(@NativeType(\"bgfx_vertex_decl_handle_t\") short value) { ndecl(address(), value); return this; }", "dst_method": "public BGFXTransientVertexBuffer layoutHandle(@NativeType(\"bgfx_vertex_layout_handle_t\") short value) { nlayoutHandle(address(), value); return this; }", "src_desc": "Sets the specified value to the {@code decl} field.", "dst_desc": "Sets the specified value to the {@code layoutHandle} field.", "code_change_seq": [["public", "public", "equal"], ["BGFX", "BGFX", "equal"], ["<con>", "<con>", "equal"], ["Transient", "Transient", "equal"], ["<con>", "<con>", "equal"], ["Vertex", "Vertex", "equal"], ["<con>", "<con>", "equal"], ["Buffer", "Buffer", "equal"], ["", "layout", "insert"], ["", "<con>", "insert"], ["decl", "Handle", "replace"], ["(", "(", "equal"], ["@", "@", "equal"], ["Native", "Native", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["bgfx", "bgfx", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["vertex", "vertex", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["decl", "layout", "replace"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["handle", "handle", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["t", "t", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], ["short", "short", "equal"], ["value", "value", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "nlayout", "insert"], ["", "<con>", "insert"], ["ndecl", "Handle", "replace"], ["(", "(", "equal"], ["address", "address", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["value", "value", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "specified", "value", "to", "the", "{", "<con>", "@", "<con>", "code", "decl", "<con>", "}", "field", "<con>", "."], "dst_desc_tokens": ["Sets", "the", "specified", "value", "to", "the", "{", "<con>", "@", "<con>", "code", "layout", "<con>", "Handle", "<con>", "}", "field", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 1406489, "full_name": "bazelbuild/bazel", "commit_id": "d21fa42827178c02237658a5510489b8c1ed4469", "src_method": "public static boolean isAvailable(RuleContext ruleContext, String whitelistName) {\n    String attributeName = getAttributeNameFromWhitelistName(whitelistName);\n    Preconditions.checkArgument(ruleContext.isAttrDefined(attributeName, LABEL));\n    TransitiveInfoCollection packageGroup = ruleContext.getPrerequisite(attributeName, Mode.HOST);\n    Label label = ruleContext.getLabel();\n    PackageSpecificationProvider packageSpecificationProvider =\n        packageGroup.getProvider(PackageSpecificationProvider.class);\n    requireNonNull(packageSpecificationProvider, packageGroup.getLabel().toString());\n    return Streams.stream(packageSpecificationProvider.getPackageSpecifications())\n        .anyMatch(p -> p.containsPackage(label.getPackageIdentifier()));\n  }", "dst_method": "public static boolean isAvailable(RuleContext ruleContext, String whitelistName) {\n    return isAvailableFor(ruleContext, whitelistName, ruleContext.getLabel());\n  }", "src_desc": "Returns whether the rule in the given RuleContext is in a whitelist.", "dst_desc": "Returns whether the rule in the given RuleContext *was instantiated* in a whitelist.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["boolean", "boolean", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Available", "Available", "equal"], ["(", "(", "equal"], ["Rule", "Rule", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], ["rule", "rule", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["whitelist", "whitelist", "equal"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["String", "return", "replace"], ["attribute", "is", "replace"], ["<con>", "<con>", "equal"], ["Name", "Available", "replace"], ["", "<con>", "insert"], ["", "For", "insert"], ["=", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Attribute", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], ["<con>", "", "delete"], ["From", "", "delete"], ["<con>", "", "delete"], ["Whitelist", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], ["(", "", "delete"], ["whitelist", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Preconditions", "", "delete"], [".", "", "delete"], ["check", "", "delete"], ["<con>", "", "delete"], ["Argument", "", "delete"], ["(", "(", "equal"], ["rule", "rule", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], [".", "", "delete"], ["is", "", "delete"], ["<con>", "", "delete"], ["Attr", "", "delete"], ["<con>", "", "delete"], ["Defined", "", "delete"], ["(", "", "delete"], ["attribute", "", "delete"], ["<con>", "", "delete"], ["Name", "", "delete"], [",", ",", "equal"], ["LABEL", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Transitive", "", "delete"], ["<con>", "", "delete"], ["Info", "", "delete"], ["<con>", "", "delete"], ["Collection", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Group", "", "delete"], ["=", "", "delete"], ["rule", "", "delete"], ["<con>", "", "delete"], ["Context", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Prerequisite", "", "delete"], ["(", "", "delete"], ["attribute", "whitelist", "replace"], ["<con>", "<con>", "equal"], ["Name", "Name", "equal"], [",", ",", "equal"], ["Mode", "", "delete"], [".", "", "delete"], ["HOST", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Label", "", "delete"], ["label", "", "delete"], ["=", "", "delete"], ["rule", "rule", "equal"], ["<con>", "<con>", "equal"], ["Context", "Context", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Label", "Label", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", "", "delete"], ["Package", "", "delete"], ["<con>", "", "delete"], ["Specification", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Specification", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], ["=", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Group", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], ["(", "", "delete"], ["Package", "", "delete"], ["<con>", "", "delete"], ["Specification", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], [".", "", "delete"], ["class", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["require", "", "delete"], ["<con>", "", "delete"], ["Non", "", "delete"], ["<con>", "", "delete"], ["Null", "", "delete"], ["(", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Specification", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], [",", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Group", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Label", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["to", "", "delete"], ["<con>", "", "delete"], ["String", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["return", "", "delete"], ["Streams", "", "delete"], [".", "", "delete"], ["stream", "", "delete"], ["(", "", "delete"], ["package", "", "delete"], ["<con>", "", "delete"], ["Specification", "", "delete"], ["<con>", "", "delete"], ["Provider", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Package", "", "delete"], ["<con>", "", "delete"], ["Specifications", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["any", "", "delete"], ["<con>", "", "delete"], ["Match", "", "delete"], ["(", "", "delete"], ["p", "", "delete"], ["->", "", "delete"], ["p", "", "delete"], [".", "", "delete"], ["contains", "", "delete"], ["<con>", "", "delete"], ["Package", "", "delete"], ["(", "", "delete"], ["label", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Package", "", "delete"], ["<con>", "", "delete"], ["Identifier", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [")", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Returns", "whether", "the", "rule", "in", "the", "given", "Rule", "<con>", "Context", "is", "in", "a", "whitelist", "<con>", "."], "dst_desc_tokens": ["Returns", "whether", "the", "rule", "in", "the", "given", "Rule", "<con>", "Context", "*", "<con>", "was", "instantiated", "<con>", "*", "in", "a", "whitelist", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4087997, "full_name": "apache/poi", "commit_id": "5335dd775fcebfba6cee380f95bf5d1c6871e78d", "src_method": "public void setCantSplitRow(boolean split) {\r\n        CTTrPr trpr = getTrPr();\r\n        CTOnOff onoff = trpr.addNewCantSplit();\r\n        onoff.setVal(split ? STOnOff.ON : STOnOff.OFF);\r\n    }", "dst_method": "public void setCantSplitRow(boolean split) {\r\n        CTTrPr trpr = getTrPr();\r\n        CTOnOff onoff = (trpr.sizeOfCantSplitArray() > 0 ? trpr.getCantSplitArray(0) : trpr.addNewCantSplit());\r\n        onoff.setVal(WMLHelper.BooleanToSTOnOff(split));\r\n    }", "src_desc": "This attribute controls whether to allow table rows to split across pages.", "dst_desc": "Controls whether to allow this table row to split across pages.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Cant", "Cant", "equal"], ["<con>", "<con>", "equal"], ["Split", "Split", "equal"], ["<con>", "<con>", "equal"], ["Row", "Row", "equal"], ["(", "(", "equal"], ["boolean", "boolean", "equal"], ["split", "split", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["CT", "CT", "equal"], ["<con>", "<con>", "equal"], ["Tr", "Tr", "equal"], ["<con>", "<con>", "equal"], ["Pr", "Pr", "equal"], ["trpr", "trpr", "equal"], ["=", "=", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Tr", "Tr", "equal"], ["<con>", "<con>", "equal"], ["Pr", "Pr", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["CT", "CT", "equal"], ["<con>", "<con>", "equal"], ["On", "On", "equal"], ["<con>", "<con>", "equal"], ["Off", "Off", "equal"], ["onoff", "onoff", "equal"], ["=", "=", "equal"], ["", "(", "insert"], ["", "trpr", "insert"], ["", ".", "insert"], ["", "size", "insert"], ["", "<con>", "insert"], ["", "Of", "insert"], ["", "<con>", "insert"], ["", "Cant", "insert"], ["", "<con>", "insert"], ["", "Split", "insert"], ["", "<con>", "insert"], ["", "Array", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ">", "insert"], ["", "0", "insert"], ["", "?", "insert"], ["", "trpr", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cant", "insert"], ["", "<con>", "insert"], ["", "Split", "insert"], ["", "<con>", "insert"], ["", "Array", "insert"], ["", "(", "insert"], ["", "0", "insert"], ["", ")", "insert"], ["", ":", "insert"], ["trpr", "trpr", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["New", "New", "equal"], ["<con>", "<con>", "equal"], ["Cant", "Cant", "equal"], ["<con>", "<con>", "equal"], ["Split", "Split", "equal"], ["(", "(", "equal"], ["", ")", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["onoff", "onoff", "equal"], [".", ".", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Val", "Val", "equal"], ["(", "(", "equal"], ["", "WML", "insert"], ["", "<con>", "insert"], ["", "Helper", "insert"], ["", ".", "insert"], ["", "Boolean", "insert"], ["", "<con>", "insert"], ["", "To", "insert"], ["", "<con>", "insert"], ["", "ST", "insert"], ["", "<con>", "insert"], ["", "On", "insert"], ["", "<con>", "insert"], ["", "Off", "insert"], ["", "(", "insert"], ["split", "split", "equal"], ["?", ")", "replace"], ["ST", "", "delete"], ["<con>", "", "delete"], ["On", "", "delete"], ["<con>", "", "delete"], ["Off", "", "delete"], [".", "", "delete"], ["ON", "", "delete"], [":", "", "delete"], ["ST", "", "delete"], ["<con>", "", "delete"], ["On", "", "delete"], ["<con>", "", "delete"], ["Off", "", "delete"], [".", "", "delete"], ["OFF", "", "delete"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["This", "attribute", "controls", "whether", "to", "allow", "table", "rows", "to", "split", "across", "pages", "<con>", "."], "dst_desc_tokens": ["Controls", "whether", "to", "allow", "this", "table", "row", "to", "split", "across", "pages", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4479882, "full_name": "Azure/azure-sdk-for-java", "commit_id": "67e055907835075f8056ded98a377dfec12dcbf6", "src_method": "public void getMessage() {\n\n        // BEGIN: com.azure.storage.queue.queueClient.getMessages\n        client.getMessages().forEach(\n            message -> {\n                System.out.println(\"Complete receiving the message: \" + message.getMessageId());\n            }\n        );\n        // END: com.azure.storage.queue.queueClient.getMessages\n    }", "dst_method": "public void getMessage() {\n\n        // BEGIN: com.azure.storage.queue.queueClient.receiveMessage\n        QueueMessageItem queueMessageItem = client.receiveMessage();\n        System.out.println(\"Complete receiving the message: \" + queueMessageItem.getMessageId());\n        // END: com.azure.storage.queue.queueClient.receiveMessage\n    }", "src_desc": "Generates a code sample for using {@link QueueClient#getMessages()}", "dst_desc": "Generates a code sample for using {@link QueueClient#receiveMessage()}", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "Queue", "insert"], ["", "<con>", "insert"], ["", "Message", "insert"], ["", "<con>", "insert"], ["", "Item", "insert"], ["", "queue", "insert"], ["", "<con>", "insert"], ["", "Message", "insert"], ["", "<con>", "insert"], ["", "Item", "insert"], ["", "=", "insert"], ["client", "client", "equal"], [".", ".", "equal"], ["get", "receive", "replace"], ["<con>", "<con>", "equal"], ["Messages", "Message", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [".", ";", "replace"], ["for", "", "delete"], ["<con>", "", "delete"], ["Each", "", "delete"], ["(", "", "delete"], ["message", "", "delete"], ["->", "", "delete"], ["{", "", "delete"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["println", "println", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Complete", "Complete", "equal"], ["receiving", "receiving", "equal"], ["the", "the", "equal"], ["message", "message", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["", "queue", "insert"], ["", "<con>", "insert"], ["", "Message", "insert"], ["", "<con>", "insert"], ["message", "Item", "replace"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], [")", "", "delete"], [";", "", "delete"], ["}", "", "delete"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Client", "<con>", "#", "<con>", "get", "<con>", "Messages", "<con>", "(", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Client", "<con>", "#", "<con>", "receive", "<con>", "Message", "<con>", "(", "<con>", ")", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 2443623, "full_name": "jersey/jersey", "commit_id": "eee1f8d789d36e0476d64ac6652c2a8ef456587d", "src_method": "private static void bindDescriptor(ServiceLocator locator, DynamicConfiguration dc, ActiveDescriptor<?> activeDescriptor,\n            Set<AliasDescriptor> aliases) {\n        ActiveDescriptor<Object> boundDescriptor = dc.bind(activeDescriptor);\n        for (AliasDescriptor alias : aliases) {\n            dc.bind(createAlias(locator, boundDescriptor, alias));\n        }\n    }", "dst_method": "private static void bindDescriptor(ServiceLocator locator, DynamicConfiguration dc, ActiveDescriptor<?> activeDescriptor,\n            Set<AliasBinding> aliases) {\n        ActiveDescriptor<Object> boundDescriptor = dc.bind(activeDescriptor);\n        for (AliasBinding alias : aliases) {\n            dc.bind(createAlias(locator, boundDescriptor, alias));\n        }\n    }", "src_desc": "Binds a new instance {@link Descriptor} using the information from the Jersey descriptor {@link InstanceBeanDescriptor}.", "dst_desc": "Binds a new instance {@link Binding} using the information from the Jersey descriptor {@link InstanceBinding}.", "code_change_seq": [["private", "private", "equal"], ["static", "static", "equal"], ["void", "void", "equal"], ["bind", "bind", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["(", "(", "equal"], ["Service", "Service", "equal"], ["<con>", "<con>", "equal"], ["Locator", "Locator", "equal"], ["locator", "locator", "equal"], [",", ",", "equal"], ["Dynamic", "Dynamic", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], ["dc", "dc", "equal"], [",", ",", "equal"], ["Active", "Active", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["<", "<", "equal"], ["?", "?", "equal"], [">", ">", "equal"], ["active", "active", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], [",", ",", "equal"], ["Set", "Set", "equal"], ["<", "<", "equal"], ["Alias", "Alias", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Binding", "replace"], [">", ">", "equal"], ["aliases", "aliases", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Active", "Active", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["<", "<", "equal"], ["Object", "Object", "equal"], [">", ">", "equal"], ["bound", "bound", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], ["=", "=", "equal"], ["dc", "dc", "equal"], [".", ".", "equal"], ["bind", "bind", "equal"], ["(", "(", "equal"], ["active", "active", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Alias", "Alias", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Binding", "replace"], ["alias", "alias", "equal"], [":", ":", "equal"], ["aliases", "aliases", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["dc", "dc", "equal"], [".", ".", "equal"], ["bind", "bind", "equal"], ["(", "(", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Alias", "Alias", "equal"], ["(", "(", "equal"], ["locator", "locator", "equal"], [",", ",", "equal"], ["bound", "bound", "equal"], ["<con>", "<con>", "equal"], ["Descriptor", "Descriptor", "equal"], [",", ",", "equal"], ["alias", "alias", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Binds", "a", "new", "instance", "{", "<con>", "@", "<con>", "link", "Descriptor", "<con>", "}", "using", "the", "information", "from", "the", "Jersey", "descriptor", "{", "<con>", "@", "<con>", "link", "Instance", "<con>", "Bean", "<con>", "Descriptor", "<con>", "}", "<con>", "."], "dst_desc_tokens": ["Binds", "a", "new", "instance", "{", "<con>", "@", "<con>", "link", "Binding", "<con>", "}", "using", "the", "information", "from", "the", "Jersey", "descriptor", "{", "<con>", "@", "<con>", "link", "Instance", "<con>", "Binding", "<con>", "}", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4827530, "full_name": "deeplearning4j/deeplearning4j", "commit_id": "c2a715e73449e7715eadaa337c74be06091f8f9d", "src_method": "@Override\n    public INDArray exec(Accumulation accumulation, int... dimension) {\n        return processOp(accumulation).z();\n    }", "dst_method": "@Override\n    public INDArray exec(ReduceOp reduceOp, int... dimension) {\n        return processOp(reduceOp).z();\n    }", "src_desc": "Execute an accumulation along one or more dimensions", "dst_desc": "Execute an reduceOp along one or more dimensions", "code_change_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["IND", "IND", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["exec", "exec", "equal"], ["(", "(", "equal"], ["Accumulation", "Reduce", "replace"], ["", "<con>", "insert"], ["", "Op", "insert"], ["accumulation", "reduce", "replace"], ["", "<con>", "insert"], ["", "Op", "insert"], [",", ",", "equal"], ["int", "int", "equal"], ["...", "...", "equal"], ["dimension", "dimension", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["process", "process", "equal"], ["<con>", "<con>", "equal"], ["Op", "Op", "equal"], ["(", "(", "equal"], ["accumulation", "reduce", "replace"], ["", "<con>", "insert"], ["", "Op", "insert"], [")", ")", "equal"], [".", ".", "equal"], ["z", "z", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Execute", "an", "accumulation", "along", "one", "or", "more", "dimensions"], "dst_desc_tokens": ["Execute", "an", "reduce", "<con>", "Op", "along", "one", "or", "more", "dimensions"], "label": true}
{"idx": 0, "sample_id": 1864451, "full_name": "EdwardRaff/JSAT", "commit_id": "ac8c55ad02524d2b51bd3f3d458ae5aade527e52", "src_method": "public void setVectorCollectionFactory(VectorCollectionFactory<VecPaired<Vec, Integer>> vectorCollectionFactory)\n    {\n        this.vectorCollectionFactory = vectorCollectionFactory;\n    }", "dst_method": "public void setVectorCollectionFactory(VectorCollection<VecPaired<Vec, Integer>> vc)\n    {\n        this.vc = vc;\n    }", "src_desc": "Sets the vector collection factory used to accelerate the nearest\nneighbor search.", "dst_desc": "Sets the vector collection  used to accelerate the nearest\nneighbor search.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["set", "set", "equal"], ["<con>", "<con>", "equal"], ["Vector", "Vector", "equal"], ["<con>", "<con>", "equal"], ["Collection", "Collection", "equal"], ["<con>", "<con>", "equal"], ["Factory", "Factory", "equal"], ["(", "(", "equal"], ["Vector", "Vector", "equal"], ["<con>", "<con>", "equal"], ["Collection", "Collection", "equal"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["<", "<", "equal"], ["Vec", "Vec", "equal"], ["<con>", "<con>", "equal"], ["Paired", "Paired", "equal"], ["<", "<", "equal"], ["Vec", "Vec", "equal"], [",", ",", "equal"], ["Integer", "Integer", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["vector", "vc", "replace"], ["<con>", "", "delete"], ["Collection", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["vector", "vc", "replace"], ["<con>", "", "delete"], ["Collection", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], ["=", "=", "equal"], ["vector", "vc", "replace"], ["<con>", "", "delete"], ["Collection", "", "delete"], ["<con>", "", "delete"], ["Factory", "", "delete"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "vector", "collection", "factory", "used", "to", "accelerate", "the", "nearest", "neighbor", "search", "<con>", "."], "dst_desc_tokens": ["Sets", "the", "vector", "collection", "used", "to", "accelerate", "the", "nearest", "neighbor", "search", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 307611, "full_name": "aol/cyclops-integration", "commit_id": "14ac94a1195f1799615324ad38eabe6ef392f839", "src_method": "public static <T> LazyPVectorX<T> fromStream(Stream<T> stream) {\n        Reducer<PVector<T>> v = toPVector();\n        return new LazyPVectorX<T>(null, ReactiveSeq.fromStream(stream),v, Evaluation.LAZY);\n    }", "dst_method": "public static <T> LazyPersistentListX<T> fromStream(Stream<T> stream) {\n        Reducer<PersistentList<T>> v = toPersistentList();\n        return new LazyPersistentListX<T>(null, ReactiveSeq.fromStream(stream),v, Evaluation.LAZY);\n    }", "src_desc": "Create a LazyPVectorX from a Stream", "dst_desc": "Create a LazyPersistentListX from a Stream", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["Lazy", "Lazy", "equal"], ["<con>", "<con>", "equal"], ["P", "Persistent", "replace"], ["<con>", "<con>", "equal"], ["Vector", "List", "replace"], ["<con>", "<con>", "equal"], ["X", "X", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["from", "from", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["(", "(", "equal"], ["Stream", "Stream", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["stream", "stream", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Reducer", "Reducer", "equal"], ["<", "<", "equal"], ["P", "Persistent", "replace"], ["<con>", "<con>", "equal"], ["Vector", "List", "replace"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], [">", ">", "equal"], ["v", "v", "equal"], ["=", "=", "equal"], ["to", "to", "equal"], ["<con>", "<con>", "equal"], ["P", "Persistent", "replace"], ["<con>", "<con>", "equal"], ["Vector", "List", "replace"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], ["new", "new", "equal"], ["Lazy", "Lazy", "equal"], ["<con>", "<con>", "equal"], ["P", "Persistent", "replace"], ["<con>", "<con>", "equal"], ["Vector", "List", "replace"], ["<con>", "<con>", "equal"], ["X", "X", "equal"], ["<", "<", "equal"], ["T", "T", "equal"], [">", ">", "equal"], ["(", "(", "equal"], ["null", "null", "equal"], [",", ",", "equal"], ["Reactive", "Reactive", "equal"], ["<con>", "<con>", "equal"], ["Seq", "Seq", "equal"], [".", ".", "equal"], ["from", "from", "equal"], ["<con>", "<con>", "equal"], ["Stream", "Stream", "equal"], ["(", "(", "equal"], ["stream", "stream", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["v", "v", "equal"], [",", ",", "equal"], ["Evaluation", "Evaluation", "equal"], [".", ".", "equal"], ["LAZY", "LAZY", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Create", "a", "Lazy", "<con>", "P", "<con>", "Vector", "<con>", "X", "from", "a", "Stream"], "dst_desc_tokens": ["Create", "a", "Lazy", "<con>", "Persistent", "<con>", "List", "<con>", "X", "from", "a", "Stream"], "label": true}
{"idx": 0, "sample_id": 3365653, "full_name": "realm/realm-java", "commit_id": "a83b980e30665ef2a4aa9078bd505e9b09425dc8", "src_method": "public static synchronized SyncSession getSession(SyncConfiguration syncConfiguration) {\n        // This will not create a new native (Object Store) session, this will only associate a Realm's path\n        // with a SyncSession. Object Store's SyncManager is responsible of the life cycle (including creation)\n        // of the native session, the provided Java wrap, helps interact with the native session, when reporting error\n        // or requesting an access_token for example.\n\n        //noinspection ConstantConditions\n        if (syncConfiguration == null) {\n            throw new IllegalArgumentException(\"A non-empty 'syncConfiguration' is required.\");\n        }\n\n        SyncSession session = sessions.get(syncConfiguration.getPath());\n        if (session == null) {\n            session = new SyncSession(syncConfiguration);\n            sessions.put(syncConfiguration.getPath(), session);\n            if (sessions.size() == 1) {\n                RealmLog.debug(\"first session created add network listener\");\n                NetworkStateReceiver.addListener(networkListener);\n            }\n        }\n\n        return session;\n    }", "dst_method": "public static synchronized SyncSession getSession(SyncConfiguration syncConfiguration) throws IllegalStateException {\n        //noinspection ConstantConditions\n        if (syncConfiguration == null) {\n            throw new IllegalArgumentException(\"A non-empty 'syncConfiguration' is required.\");\n        }\n\n        SyncSession session = sessions.get(syncConfiguration.getPath());\n        if (session == null) {\n            throw new IllegalStateException(\"No SyncSession found using the path : \" + syncConfiguration.getPath()\n            + \"\\nplease ensure to call this method after you've open the Realm\");\n        }\n\n        return session;\n    }", "src_desc": "Gets any cached {@link SyncSession} for the given {@link SyncConfiguration} or create a new one if\nno one exists.", "dst_desc": "Gets a cached {@link SyncSession} for the given {@link SyncConfiguration} or throw if no one exists yet.", "code_change_seq": [["public", "public", "equal"], ["static", "static", "equal"], ["synchronized", "synchronized", "equal"], ["Sync", "Sync", "equal"], ["<con>", "<con>", "equal"], ["Session", "Session", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Session", "Session", "equal"], ["(", "(", "equal"], ["Sync", "Sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], ["sync", "sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], [")", ")", "equal"], ["", "throws", "insert"], ["", "Illegal", "insert"], ["", "<con>", "insert"], ["", "State", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["sync", "sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["throw", "throw", "equal"], ["new", "new", "equal"], ["Illegal", "Illegal", "equal"], ["<con>", "<con>", "equal"], ["Argument", "Argument", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["A", "A", "equal"], ["non", "non", "equal"], ["<con>", "<con>", "equal"], ["-", "-", "equal"], ["<con>", "<con>", "equal"], ["empty", "empty", "equal"], ["'", "'", "equal"], ["<con>", "<con>", "equal"], ["sync", "sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], ["<con>", "<con>", "equal"], ["'", "'", "equal"], ["is", "is", "equal"], ["required", "required", "equal"], ["<con>", "<con>", "equal"], [".", ".", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["Sync", "Sync", "equal"], ["<con>", "<con>", "equal"], ["Session", "Session", "equal"], ["session", "session", "equal"], ["=", "=", "equal"], ["sessions", "sessions", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["sync", "sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["session", "session", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["session", "throw", "replace"], ["=", "", "delete"], ["new", "new", "equal"], ["Sync", "Illegal", "replace"], ["<con>", "<con>", "equal"], ["", "State", "insert"], ["", "<con>", "insert"], ["Session", "Exception", "replace"], ["(", "(", "equal"], ["", "\"", "insert"], ["", "No", "insert"], ["sync", "Sync", "replace"], ["<con>", "<con>", "equal"], ["Configuration", "Session", "replace"], ["", "found", "insert"], ["", "using", "insert"], ["", "the", "insert"], ["", "path", "insert"], ["", ":", "insert"], ["", "\"", "insert"], [")", "+", "replace"], [";", "", "delete"], ["sessions", "", "delete"], [".", "", "delete"], ["put", "", "delete"], ["(", "", "delete"], ["sync", "sync", "equal"], ["<con>", "<con>", "equal"], ["Configuration", "Configuration", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", "+", "replace"], ["session", "\"", "replace"], ["", "\\", "insert"], ["", "<con>", "insert"], ["", "nplease", "insert"], ["", "ensure", "insert"], ["", "to", "insert"], ["", "call", "insert"], ["", "this", "insert"], ["", "method", "insert"], ["", "after", "insert"], ["", "you", "insert"], ["", "<con>", "insert"], ["", "'", "insert"], ["", "<con>", "insert"], ["", "ve", "insert"], ["", "open", "insert"], ["", "the", "insert"], ["", "Realm", "insert"], ["", "\"", "insert"], [")", ")", "equal"], [";", ";", "equal"], ["if", "", "delete"], ["(", "", "delete"], ["sessions", "", "delete"], [".", "", "delete"], ["size", "", "delete"], ["(", "", "delete"], [")", "", "delete"], ["==", "", "delete"], ["1", "", "delete"], [")", "", "delete"], ["{", "", "delete"], ["Realm", "", "delete"], ["<con>", "", "delete"], ["Log", "", "delete"], [".", "", "delete"], ["debug", "", "delete"], ["(", "", "delete"], ["\"", "", "delete"], ["first", "", "delete"], ["session", "", "delete"], ["created", "", "delete"], ["add", "", "delete"], ["network", "", "delete"], ["listener", "", "delete"], ["\"", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Network", "", "delete"], ["<con>", "", "delete"], ["State", "", "delete"], ["<con>", "", "delete"], ["Receiver", "", "delete"], [".", "", "delete"], ["add", "", "delete"], ["<con>", "", "delete"], ["Listener", "", "delete"], ["(", "", "delete"], ["network", "", "delete"], ["<con>", "", "delete"], ["Listener", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["}", "", "delete"], ["}", "}", "equal"], ["return", "return", "equal"], ["session", "session", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Gets", "any", "cached", "{", "<con>", "@", "<con>", "link", "Sync", "<con>", "Session", "<con>", "}", "for", "the", "given", "{", "<con>", "@", "<con>", "link", "Sync", "<con>", "Configuration", "<con>", "}", "or", "create", "a", "new", "one", "if", "no", "one", "exists", "<con>", "."], "dst_desc_tokens": ["Gets", "a", "cached", "{", "<con>", "@", "<con>", "link", "Sync", "<con>", "Session", "<con>", "}", "for", "the", "given", "{", "<con>", "@", "<con>", "link", "Sync", "<con>", "Configuration", "<con>", "}", "or", "throw", "if", "no", "one", "exists", "yet", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4484242, "full_name": "Azure/azure-sdk-for-java", "commit_id": "45a5bdd0509a7ea1dbebf4410a53c436461a0612", "src_method": "public void deleteFileWithResponse() {\n        DirectoryClient directoryClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.directoryClient.deleteFileWithResponse#string-Context\n        VoidResponse response = directoryClient.deleteFileWithResponse(\"myfile\", new Context(key1, value1));\n        System.out.println(\"Completed deleting the file with status code: \" + response.statusCode());\n        // END: com.azure.storage.file.directoryClient.deleteFileWithResponse#string-Context\n    }", "dst_method": "public void deleteFileWithResponse() {\n        DirectoryClient directoryClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.DirectoryClient.deleteFileWithResponse#string-duration-context\n        VoidResponse response = directoryClient.deleteFileWithResponse(\"myfile\",\n            Duration.ofSeconds(1), new Context(key1, value1));\n        System.out.println(\"Completed deleting the file with status code: \" + response.statusCode());\n        // END: com.azure.storage.file.DirectoryClient.deleteFileWithResponse#string-duration-context\n    }", "src_desc": "Generates a code sample for using {@link DirectoryClient#deleteFileWithResponse(String, Context)}", "dst_desc": "Generates a code sample for using {@link DirectoryClient#deleteFileWithResponse(String, Duration, Context)}", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Directory", "Directory", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["=", "=", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["SAS", "SAS", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Void", "Void", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["response", "response", "equal"], ["=", "=", "equal"], ["directory", "directory", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["delete", "delete", "equal"], ["<con>", "<con>", "equal"], ["File", "File", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["myfile", "myfile", "equal"], ["\"", "\"", "equal"], ["", ",", "insert"], ["", "Duration", "insert"], ["", ".", "insert"], ["", "of", "insert"], ["", "<con>", "insert"], ["", "Seconds", "insert"], ["", "(", "insert"], ["", "1", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["new", "new", "equal"], ["Context", "Context", "equal"], ["(", "(", "equal"], ["key1", "key1", "equal"], [",", ",", "equal"], ["value1", "value1", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["println", "println", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Completed", "Completed", "equal"], ["deleting", "deleting", "equal"], ["the", "the", "equal"], ["file", "file", "equal"], ["with", "with", "equal"], ["status", "status", "equal"], ["code", "code", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["response", "response", "equal"], [".", ".", "equal"], ["status", "status", "equal"], ["<con>", "<con>", "equal"], ["Code", "Code", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Client", "<con>", "#", "<con>", "delete", "<con>", "File", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "String", "<con>", ",", "Context", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Directory", "<con>", "Client", "<con>", "#", "<con>", "delete", "<con>", "File", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "String", "<con>", ",", "Duration", "<con>", ",", "Context", "<con>", ")", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 5630351, "full_name": "watson-developer-cloud/java-sdk", "commit_id": "c44118e6766c0927c12a84f79c78197ae886b253", "src_method": "public void setOverwrite(final Boolean overwrite) {\n    this.overwrite = overwrite;\n  }", "dst_method": "public Builder overwrite(Boolean overwrite) {\n      this.overwrite = overwrite;\n      return this;\n    }", "src_desc": "Sets the overwrite.", "dst_desc": "Set the overwrite.", "code_change_seq": [["public", "public", "equal"], ["void", "Builder", "replace"], ["set", "", "delete"], ["<con>", "", "delete"], ["Overwrite", "overwrite", "replace"], ["(", "(", "equal"], ["final", "", "delete"], ["Boolean", "Boolean", "equal"], ["overwrite", "overwrite", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["this", "this", "equal"], [".", ".", "equal"], ["overwrite", "overwrite", "equal"], ["=", "=", "equal"], ["overwrite", "overwrite", "equal"], [";", ";", "equal"], ["", "return", "insert"], ["", "this", "insert"], ["", ";", "insert"], ["}", "}", "equal"]], "src_desc_tokens": ["Sets", "the", "overwrite", "<con>", "."], "dst_desc_tokens": ["Set", "the", "overwrite", "<con>", "."], "label": true}
{"idx": 9, "sample_id": 4476809, "full_name": "Azure/azure-sdk-for-java", "commit_id": "c978dbcd535f8350cacacbf02e2186997d692dda", "src_method": "public Key createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions) {\n        return createRsaKeyWithResponse(rsaKeyCreateOptions, Context.NONE).getValue();\n    }", "dst_method": "public KeyVaultKey createRsaKey(CreateRsaKeyOptions createRsaKeyOptions) {\n        return createRsaKeyWithResponse(createRsaKeyOptions, Context.NONE).getValue();\n    }", "src_desc": "The {@link RsaKeyCreateOptions#getKeyType() keyType} indicates the type of key to create.", "dst_desc": "The {@link CreateRsaKeyOptions#getKeyType() keyType} indicates the type of key to create.", "code_change_seq": [["public", "public", "equal"], ["Key", "Key", "equal"], ["", "<con>", "insert"], ["", "Vault", "insert"], ["", "<con>", "insert"], ["", "Key", "insert"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Rsa", "Rsa", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["(", "(", "equal"], ["", "Create", "insert"], ["", "<con>", "insert"], ["Rsa", "Rsa", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Create", "", "delete"], ["<con>", "", "delete"], ["Options", "Options", "equal"], ["", "create", "insert"], ["", "<con>", "insert"], ["rsa", "Rsa", "replace"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Create", "", "delete"], ["<con>", "", "delete"], ["Options", "Options", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Rsa", "Rsa", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Response", "Response", "equal"], ["(", "(", "equal"], ["", "create", "insert"], ["", "<con>", "insert"], ["rsa", "Rsa", "replace"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["<con>", "<con>", "equal"], ["Create", "", "delete"], ["<con>", "", "delete"], ["Options", "Options", "equal"], [",", ",", "equal"], ["Context", "Context", "equal"], [".", ".", "equal"], ["NONE", "NONE", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Rsa", "<con>", "Key", "<con>", "Create", "<con>", "Options", "<con>", "#", "<con>", "get", "<con>", "Key", "<con>", "Type", "<con>", "(", "<con>", ")", "key", "<con>", "Type", "<con>", "}", "indicates", "the", "type", "of", "key", "to", "create", "<con>", "."], "dst_desc_tokens": ["The", "{", "<con>", "@", "<con>", "link", "Create", "<con>", "Rsa", "<con>", "Key", "<con>", "Options", "<con>", "#", "<con>", "get", "<con>", "Key", "<con>", "Type", "<con>", "(", "<con>", ")", "key", "<con>", "Type", "<con>", "}", "indicates", "the", "type", "of", "key", "to", "create", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4617641, "full_name": "BaseXdb/basex", "commit_id": "da71ccc7b7946758681df4494b32982083611a7d", "src_method": "@Test\n  public void queueTest() {\n    final int n = 2_000_000, k = n / 100;\n    Array seq = Array.empty();\n    for(int i = 0; i < k; i++) seq = seq.cons(Int.get(i));\n\n    for(int i = k; i < n; i++) {\n      assertEquals(k, seq.arraySize());\n      assertEquals(i - k, ((Int) seq.last()).itr());\n      seq = seq.init();\n      seq = seq.cons(Int.get(i));\n    }\n\n    assertEquals(k, seq.arraySize());\n    for(int i = 0; i < k; i++) {\n      assertEquals(n - k + i, ((Int) seq.last()).itr());\n      seq = seq.init();\n      assertEquals(k - i - 1, seq.arraySize());\n    }\n\n    assertTrue(seq.isEmptyArray());\n  }", "dst_method": "@Test\n  public void queueTest() {\n    final int n = 2_000_000, k = n / 100;\n    XQArray seq = XQArray.empty();\n    for(int i = 0; i < k; i++) seq = seq.cons(Int.get(i));\n\n    for(int i = k; i < n; i++) {\n      assertEquals(k, seq.arraySize());\n      assertEquals(i - k, ((Int) seq.last()).itr());\n      seq = seq.init();\n      seq = seq.cons(Int.get(i));\n    }\n\n    assertEquals(k, seq.arraySize());\n    for(int i = 0; i < k; i++) {\n      assertEquals(n - k + i, ((Int) seq.last()).itr());\n      seq = seq.init();\n      assertEquals(k - i - 1, seq.arraySize());\n    }\n\n    assertTrue(seq.isEmptyArray());\n  }", "src_desc": "Test an {@link Array} used as a FIFO queue.", "dst_desc": "Test an {@link XQArray} used as a FIFO queue.", "code_change_seq": [["@", "@", "equal"], ["Test", "Test", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["queue", "queue", "equal"], ["<con>", "<con>", "equal"], ["Test", "Test", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["final", "final", "equal"], ["int", "int", "equal"], ["n", "n", "equal"], ["=", "=", "equal"], ["2_000_000", "2_000_000", "equal"], [",", ",", "equal"], ["k", "k", "equal"], ["=", "=", "equal"], ["n", "n", "equal"], ["/", "/", "equal"], ["100", "100", "equal"], [";", ";", "equal"], ["", "XQ", "insert"], ["", "<con>", "insert"], ["Array", "Array", "equal"], ["seq", "seq", "equal"], ["=", "=", "equal"], ["", "XQ", "insert"], ["", "<con>", "insert"], ["Array", "Array", "equal"], [".", ".", "equal"], ["empty", "empty", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["k", "k", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["seq", "seq", "equal"], ["=", "=", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["cons", "cons", "equal"], ["(", "(", "equal"], ["Int", "Int", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["k", "k", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["n", "n", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["k", "k", "equal"], [",", ",", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], ["-", "-", "equal"], ["k", "k", "equal"], [",", ",", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Int", "Int", "equal"], [")", ")", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["last", "last", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["itr", "itr", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["seq", "seq", "equal"], ["=", "=", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["init", "init", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["seq", "seq", "equal"], ["=", "=", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["cons", "cons", "equal"], ["(", "(", "equal"], ["Int", "Int", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["i", "i", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["k", "k", "equal"], [",", ",", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["int", "int", "equal"], ["i", "i", "equal"], ["=", "=", "equal"], ["0", "0", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["<", "<", "equal"], ["k", "k", "equal"], [";", ";", "equal"], ["i", "i", "equal"], ["++", "++", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["n", "n", "equal"], ["-", "-", "equal"], ["k", "k", "equal"], ["+", "+", "equal"], ["i", "i", "equal"], [",", ",", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["Int", "Int", "equal"], [")", ")", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["last", "last", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["itr", "itr", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["seq", "seq", "equal"], ["=", "=", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["init", "init", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["k", "k", "equal"], ["-", "-", "equal"], ["i", "i", "equal"], ["-", "-", "equal"], ["1", "1", "equal"], [",", ",", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["array", "array", "equal"], ["<con>", "<con>", "equal"], ["Size", "Size", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["True", "True", "equal"], ["(", "(", "equal"], ["seq", "seq", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Empty", "Empty", "equal"], ["<con>", "<con>", "equal"], ["Array", "Array", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Test", "an", "{", "<con>", "@", "<con>", "link", "Array", "<con>", "}", "used", "as", "a", "FIFO", "queue", "<con>", "."], "dst_desc_tokens": ["Test", "an", "{", "<con>", "@", "<con>", "link", "XQ", "<con>", "Array", "<con>", "}", "used", "as", "a", "FIFO", "queue", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4360971, "full_name": "Atmosphere/atmosphere", "commit_id": "a148d980367d5a6f1a47dc8e1c153eb35d7e746d", "src_method": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {\n        if (!filters.contains(filter)) {\n            filters.addFirst(filter);\n        }\n        return this;\n    }", "dst_method": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {\n        if (!filters.contains(filter)) {\n            filters.addLast(filter);\n        }\n        return this;\n    }", "src_desc": "Add an {@link AsyncIOInterceptor} that will be invoked in the reverse order it was added.", "dst_desc": "Add an {@link AsyncIOInterceptor} that will be invoked in the order it was added.", "code_change_seq": [["public", "public", "equal"], ["Atmosphere", "Atmosphere", "equal"], ["<con>", "<con>", "equal"], ["Interceptor", "Interceptor", "equal"], ["<con>", "<con>", "equal"], ["Writer", "Writer", "equal"], ["interceptor", "interceptor", "equal"], ["(", "(", "equal"], ["Async", "Async", "equal"], ["<con>", "<con>", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Interceptor", "Interceptor", "equal"], ["filter", "filter", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["!", "!", "equal"], ["filters", "filters", "equal"], [".", ".", "equal"], ["contains", "contains", "equal"], ["(", "(", "equal"], ["filter", "filter", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["filters", "filters", "equal"], [".", ".", "equal"], ["add", "add", "equal"], ["<con>", "<con>", "equal"], ["First", "Last", "replace"], ["(", "(", "equal"], ["filter", "filter", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["return", "return", "equal"], ["this", "this", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Add", "an", "{", "<con>", "@", "<con>", "link", "Async", "<con>", "IO", "<con>", "Interceptor", "<con>", "}", "that", "will", "be", "invoked", "in", "the", "reverse", "order", "it", "was", "added", "<con>", "."], "dst_desc_tokens": ["Add", "an", "{", "<con>", "@", "<con>", "link", "Async", "<con>", "IO", "<con>", "Interceptor", "<con>", "}", "that", "will", "be", "invoked", "in", "the", "order", "it", "was", "added", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 3630733, "full_name": "stripe/stripe-android", "commit_id": "ae06ebeb948d5cef14ff96ddeb891e23e5b07f41", "src_method": "public void createPiiToken(\n            @NonNull final String personalId,\n            @NonNull final ApiResultCallback<Token> callback) {\n        createPiiToken(personalId, mDefaultPublishableKey, null, callback);\n    }", "dst_method": "public void createPiiToken(\n            @NonNull final String personalId,\n            @NonNull final ApiResultCallback<Token> callback) {\n        createTokenFromParams(\n                new PiiTokenParams(personalId).toParamMap(),\n                mDefaultPublishableKey,\n                Token.TokenType.PII,\n                null,\n                callback);\n    }", "src_desc": "The simplest way to create a PII token.", "dst_desc": "Create a PII token asynchronously.", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Pii", "Pii", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], ["@", "@", "equal"], ["Non", "Non", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["personal", "personal", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], [",", ",", "equal"], ["@", "@", "equal"], ["Non", "Non", "equal"], ["<con>", "<con>", "equal"], ["Null", "Null", "equal"], ["final", "final", "equal"], ["Api", "Api", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Callback", "Callback", "equal"], ["<", "<", "equal"], ["Token", "Token", "equal"], [">", ">", "equal"], ["callback", "callback", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["", "create", "insert"], ["", "<con>", "insert"], ["", "Token", "insert"], ["", "<con>", "insert"], ["", "From", "insert"], ["", "<con>", "insert"], ["", "Params", "insert"], ["", "(", "insert"], ["", "new", "insert"], ["create", "", "delete"], ["<con>", "", "delete"], ["Pii", "Pii", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["", "<con>", "insert"], ["", "Params", "insert"], ["(", "(", "equal"], ["personal", "personal", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["", ")", "insert"], ["", ".", "insert"], ["", "to", "insert"], ["", "<con>", "insert"], ["", "Param", "insert"], ["", "<con>", "insert"], ["", "Map", "insert"], ["", "(", "insert"], ["", ")", "insert"], [",", ",", "equal"], ["m", "m", "equal"], ["<con>", "<con>", "equal"], ["Default", "Default", "equal"], ["<con>", "<con>", "equal"], ["Publishable", "Publishable", "equal"], ["<con>", "<con>", "equal"], ["Key", "Key", "equal"], ["", ",", "insert"], ["", "Token", "insert"], ["", ".", "insert"], ["", "Token", "insert"], ["", "<con>", "insert"], ["", "Type", "insert"], ["", ".", "insert"], ["", "PII", "insert"], [",", ",", "equal"], ["null", "null", "equal"], [",", ",", "equal"], ["callback", "callback", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["The", "simplest", "way", "to", "create", "a", "PII", "token", "<con>", "."], "dst_desc_tokens": ["Create", "a", "PII", "token", "asynchronously", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 1864721, "full_name": "EdwardRaff/JSAT", "commit_id": "750624ddecb1cce7c15553a99e355789dca6f4a1", "src_method": "@Test\n    public void testTrainC_ClassificationDataSet_ExecutorService()\n    {\n        System.out.println(\"trainC\");\n        ClassificationDataSet train = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        LogisticRegressionDCD lr = new LogisticRegressionDCD();\n        lr.trainC(train, ex);\n        \n        ClassificationDataSet test = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        for(DataPointPair<Integer> dpp : test.getAsDPPList())\n            assertEquals(dpp.getPair().longValue(), lr.classify(dpp.getDataPoint()).mostLikely());\n    }", "dst_method": "@Test\n    public void testTrainC_ClassificationDataSet_ExecutorService()\n    {\n        System.out.println(\"trainC\");\n        ClassificationDataSet train = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        LogisticRegressionDCD lr = new LogisticRegressionDCD();\n        lr.train(train, true);\n        \n        ClassificationDataSet test = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        for(DataPointPair<Integer> dpp : test.getAsDPPList())\n            assertEquals(dpp.getPair().longValue(), lr.classify(dpp.getDataPoint()).mostLikely());\n    }", "src_desc": "Test of trainC method, of class LogisticRegressionDCD.", "dst_desc": "Test of train method, of class LogisticRegressionDCD.", "code_change_seq": [["@", "@", "equal"], ["Test", "Test", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["test", "test", "equal"], ["<con>", "<con>", "equal"], ["Train", "Train", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Classification", "Classification", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["Executor", "Executor", "equal"], ["<con>", "<con>", "equal"], ["Service", "Service", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["println", "println", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["train", "train", "equal"], ["<con>", "<con>", "equal"], ["C", "C", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Classification", "Classification", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["train", "train", "equal"], ["=", "=", "equal"], ["Fixed", "Fixed", "equal"], ["<con>", "<con>", "equal"], ["Problems", "Problems", "equal"], [".", ".", "equal"], ["get2", "get2", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Linear", "Linear", "equal"], ["(", "(", "equal"], ["200", "200", "equal"], [",", ",", "equal"], ["Random", "Random", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Random", "Random", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Logistic", "Logistic", "equal"], ["<con>", "<con>", "equal"], ["Regression", "Regression", "equal"], ["<con>", "<con>", "equal"], ["DCD", "DCD", "equal"], ["lr", "lr", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Logistic", "Logistic", "equal"], ["<con>", "<con>", "equal"], ["Regression", "Regression", "equal"], ["<con>", "<con>", "equal"], ["DCD", "DCD", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["lr", "lr", "equal"], [".", ".", "equal"], ["train", "train", "equal"], ["<con>", "", "delete"], ["C", "", "delete"], ["(", "(", "equal"], ["train", "train", "equal"], [",", ",", "equal"], ["ex", "true", "replace"], [")", ")", "equal"], [";", ";", "equal"], ["Classification", "Classification", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Set", "Set", "equal"], ["test", "test", "equal"], ["=", "=", "equal"], ["Fixed", "Fixed", "equal"], ["<con>", "<con>", "equal"], ["Problems", "Problems", "equal"], [".", ".", "equal"], ["get2", "get2", "equal"], ["<con>", "<con>", "equal"], ["Class", "Class", "equal"], ["<con>", "<con>", "equal"], ["Linear", "Linear", "equal"], ["(", "(", "equal"], ["200", "200", "equal"], [",", ",", "equal"], ["Random", "Random", "equal"], ["<con>", "<con>", "equal"], ["Util", "Util", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Random", "Random", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["for", "for", "equal"], ["(", "(", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Point", "Point", "equal"], ["<con>", "<con>", "equal"], ["Pair", "Pair", "equal"], ["<", "<", "equal"], ["Integer", "Integer", "equal"], [">", ">", "equal"], ["dpp", "dpp", "equal"], [":", ":", "equal"], ["test", "test", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["As", "As", "equal"], ["<con>", "<con>", "equal"], ["DPP", "DPP", "equal"], ["<con>", "<con>", "equal"], ["List", "List", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["assert", "assert", "equal"], ["<con>", "<con>", "equal"], ["Equals", "Equals", "equal"], ["(", "(", "equal"], ["dpp", "dpp", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Pair", "Pair", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["long", "long", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["lr", "lr", "equal"], [".", ".", "equal"], ["classify", "classify", "equal"], ["(", "(", "equal"], ["dpp", "dpp", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Data", "Data", "equal"], ["<con>", "<con>", "equal"], ["Point", "Point", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["most", "most", "equal"], ["<con>", "<con>", "equal"], ["Likely", "Likely", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Test", "of", "train", "<con>", "C", "method", "<con>", ",", "of", "class", "Logistic", "<con>", "Regression", "<con>", "DCD", "<con>", "."], "dst_desc_tokens": ["Test", "of", "train", "method", "<con>", ",", "of", "class", "Logistic", "<con>", "Regression", "<con>", "DCD", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 4491178, "full_name": "Azure/azure-sdk-for-java", "commit_id": "84dfd55bd6966c52f909f09946cba113e773c7be", "src_method": "public void enqueueMessageWithTimeoutOverload() {\n        QueueClient queueClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.queue.queueClient.enqueueMessage#string-duration-duration\n        EnqueuedMessage enqueuedMessage = queueClient.enqueueMessage(\"Hello, Azure\",\n            Duration.ofSeconds(5), null).value();\n        System.out.printf(\"Message %s expires at %s\", enqueuedMessage.messageId(), enqueuedMessage.expirationTime());\n        // END: com.azure.storage.queue.queueClient.enqueueMessage#string-duration-duration\n    }", "dst_method": "public void enqueueMessageWithTimeoutOverload() {\n        QueueClient queueClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.queue.queueClient.enqueueMessageWithResponse#string-duration-duration-Context\n        EnqueuedMessage enqueuedMessage = queueClient.enqueueMessageWithResponse(\"Hello, Azure\",\n            Duration.ofSeconds(5), null, new Context(key1, value1)).value();\n        System.out.printf(\"Message %s expires at %s\", enqueuedMessage.messageId(), enqueuedMessage.expirationTime());\n        // END: com.azure.storage.queue.queueClient.enqueueMessageWithResponse#string-duration-duration-Context\n    }", "src_desc": "Generates a code sample for using {@link QueueClient#enqueueMessage(String, Duration, Duration)}", "dst_desc": "Generates a code sample for using {@link QueueClient#enqueueMessageWithResponse(String, Duration, Duration, Context)}", "code_change_seq": [["public", "public", "equal"], ["void", "void", "equal"], ["enqueue", "enqueue", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["Timeout", "Timeout", "equal"], ["<con>", "<con>", "equal"], ["Overload", "Overload", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["Queue", "Queue", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["queue", "queue", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["=", "=", "equal"], ["create", "create", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], ["<con>", "<con>", "equal"], ["With", "With", "equal"], ["<con>", "<con>", "equal"], ["SAS", "SAS", "equal"], ["<con>", "<con>", "equal"], ["Token", "Token", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Enqueued", "Enqueued", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["enqueued", "enqueued", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["=", "=", "equal"], ["queue", "queue", "equal"], ["<con>", "<con>", "equal"], ["Client", "Client", "equal"], [".", ".", "equal"], ["enqueue", "enqueue", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["", "<con>", "insert"], ["", "With", "insert"], ["", "<con>", "insert"], ["", "Response", "insert"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Hello", "Hello", "equal"], ["<con>", "<con>", "equal"], [",", ",", "equal"], ["Azure", "Azure", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["Duration", "Duration", "equal"], [".", ".", "equal"], ["of", "of", "equal"], ["<con>", "<con>", "equal"], ["Seconds", "Seconds", "equal"], ["(", "(", "equal"], ["5", "5", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["null", "null", "equal"], ["", ",", "insert"], ["", "new", "insert"], ["", "Context", "insert"], ["", "(", "insert"], ["", "key1", "insert"], ["", ",", "insert"], ["", "value1", "insert"], ["", ")", "insert"], [")", ")", "equal"], [".", ".", "equal"], ["value", "value", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["System", "System", "equal"], [".", ".", "equal"], ["out", "out", "equal"], [".", ".", "equal"], ["printf", "printf", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["Message", "Message", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["expires", "expires", "equal"], ["at", "at", "equal"], ["%", "%", "equal"], ["<con>", "<con>", "equal"], ["s", "s", "equal"], ["\"", "\"", "equal"], [",", ",", "equal"], ["enqueued", "enqueued", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], [".", ".", "equal"], ["message", "message", "equal"], ["<con>", "<con>", "equal"], ["Id", "Id", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [",", ",", "equal"], ["enqueued", "enqueued", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], [".", ".", "equal"], ["expiration", "expiration", "equal"], ["<con>", "<con>", "equal"], ["Time", "Time", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Client", "<con>", "#", "<con>", "enqueue", "<con>", "Message", "<con>", "(", "<con>", "String", "<con>", ",", "Duration", "<con>", ",", "Duration", "<con>", ")", "<con>", "}"], "dst_desc_tokens": ["Generates", "a", "code", "sample", "for", "using", "{", "<con>", "@", "<con>", "link", "Queue", "<con>", "Client", "<con>", "#", "<con>", "enqueue", "<con>", "Message", "<con>", "With", "<con>", "Response", "<con>", "(", "<con>", "String", "<con>", ",", "Duration", "<con>", ",", "Duration", "<con>", ",", "Context", "<con>", ")", "<con>", "}"], "label": true}
{"idx": 0, "sample_id": 19726, "full_name": "adempiere/adempiere", "commit_id": "885375e270c955edbbe5a79939dff606e0a299b6", "src_method": "protected Timestamp getStatementdate() {\n\t\treturn statementdate;\n\t}", "dst_method": "protected Timestamp getStatementDate() {\n\t\treturn statementDate;\n\t}", "src_desc": "Getter Parameter Value for statementdate", "dst_desc": "Getter Parameter Value for Statement date", "code_change_seq": [["protected", "protected", "equal"], ["Timestamp", "Timestamp", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Statementdate", "Statement", "replace"], ["", "<con>", "insert"], ["", "Date", "insert"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["statementdate", "statement", "replace"], ["", "<con>", "insert"], ["", "Date", "insert"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Getter", "Parameter", "Value", "for", "statementdate"], "dst_desc_tokens": ["Getter", "Parameter", "Value", "for", "Statement", "date"], "label": true}
{"idx": 0, "sample_id": 2887425, "full_name": "oblac/jodd", "commit_id": "dba8515ceac7d344084ebeaa66d6b52d5c1f9c3d", "src_method": "@Override\n\tpublic void render(final ActionRequest actionRequest, final T resultValue) throws Exception {\n\t\tString resultBasePath = actionRequest.getActionRuntime().getResultBasePath();\n\n\t\tfinal String path = resultValue != null ? resultValue.path() : StringPool.EMPTY;\n\n\t\tString actionAndResultPath = resultBasePath + (resultValue != null ? ':' + path : StringPool.EMPTY);\n\n\t\tString target = targetCache.get(actionAndResultPath);\n\n\t\tif (target == null) {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"new target: \" + actionAndResultPath);\n\t\t\t}\n\n\t\t\ttarget = resolveTarget(actionRequest, path);\n\n\t\t\tif (target == null) {\n\t\t\t\ttargetNotFound(actionRequest, actionAndResultPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"target found: \" + target);\n\t\t\t}\n\n\t\t\t// store target in cache\n\t\t\ttargetCache.put(actionAndResultPath, target);\n\t\t}\n\n\t\t// the target exists, continue\n\t\trenderView(actionRequest, target);\n\t}", "dst_method": "@Override\n\tpublic void render(final ActionRequest actionRequest, final Object resultValue) throws Exception {\n\t\tfinal PathResult pathResult;\n\n\t\tif (resultValue == null) {\n\t\t\tpathResult = resultOf(StringPool.EMPTY);\n\t\t} else {\n\t\t\tif (resultValue instanceof String) {\n\t\t\t\tpathResult = resultOf(resultValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpathResult = (PathResult) resultValue;\n\t\t\t}\n\t\t}\n\n\t\tfinal String resultBasePath = actionRequest.getActionRuntime().getResultBasePath();\n\n\t\tfinal String path = pathResult != null ? pathResult.path() : StringPool.EMPTY;\n\n\t\tfinal String actionAndResultPath = resultBasePath + (pathResult != null ? ':' + path : StringPool.EMPTY);\n\n\t\tString target = targetCache.get(actionAndResultPath);\n\n\t\tif (target == null) {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"new target: \" + actionAndResultPath);\n\t\t\t}\n\n\t\t\ttarget = resolveTarget(actionRequest, path);\n\n\t\t\tif (target == null) {\n\t\t\t\ttargetNotFound(actionRequest, actionAndResultPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"target found: \" + target);\n\t\t\t}\n\n\t\t\t// store target in cache\n\t\t\ttargetCache.put(actionAndResultPath, target);\n\t\t}\n\n\t\t// the target exists, continue\n\t\trenderView(actionRequest, target);\n\t}", "src_desc": "Dispatches to the JSP location created from result value and JSP extension.", "dst_desc": "Dispatches to the template location created from result value and JSP extension.", "code_change_seq": [["@", "@", "equal"], ["Override", "Override", "equal"], ["public", "public", "equal"], ["void", "void", "equal"], ["render", "render", "equal"], ["(", "(", "equal"], ["final", "final", "equal"], ["Action", "Action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [",", ",", "equal"], ["final", "final", "equal"], ["T", "Object", "replace"], ["result", "result", "equal"], ["<con>", "<con>", "equal"], ["Value", "Value", "equal"], [")", ")", "equal"], ["throws", "throws", "equal"], ["Exception", "Exception", "equal"], ["{", "{", "equal"], ["", "final", "insert"], ["", "Path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", "path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["", "==", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", "=", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Of", "insert"], ["", "(", "insert"], ["", "String", "insert"], ["", "<con>", "insert"], ["", "Pool", "insert"], ["", ".", "insert"], ["", "EMPTY", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "else", "insert"], ["", "{", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["", "instanceof", "insert"], ["", "String", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", "=", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Of", "insert"], ["", "(", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "else", "insert"], ["", "{", "insert"], ["", "path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", "=", "insert"], ["", "(", "insert"], ["", "Path", "insert"], ["", "<con>", "insert"], ["", "Result", "insert"], ["", ")", "insert"], ["", "result", "insert"], ["", "<con>", "insert"], ["", "Value", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "}", "insert"], ["", "final", "insert"], ["String", "String", "equal"], ["result", "result", "equal"], ["<con>", "<con>", "equal"], ["Base", "Base", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["=", "=", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Action", "Action", "equal"], ["<con>", "<con>", "equal"], ["Runtime", "Runtime", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Base", "Base", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["final", "final", "equal"], ["String", "String", "equal"], ["path", "path", "equal"], ["=", "=", "equal"], ["result", "path", "replace"], ["<con>", "<con>", "equal"], ["Value", "Result", "replace"], ["!=", "!=", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["result", "path", "replace"], ["<con>", "<con>", "equal"], ["Value", "Result", "replace"], [".", ".", "equal"], ["path", "path", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [":", ":", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Pool", "Pool", "equal"], [".", ".", "equal"], ["EMPTY", "EMPTY", "equal"], [";", ";", "equal"], ["", "final", "insert"], ["String", "String", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["=", "=", "equal"], ["result", "result", "equal"], ["<con>", "<con>", "equal"], ["Base", "Base", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], ["+", "+", "equal"], ["(", "(", "equal"], ["result", "path", "replace"], ["<con>", "<con>", "equal"], ["Value", "Result", "replace"], ["!=", "!=", "equal"], ["null", "null", "equal"], ["?", "?", "equal"], ["':'", "':'", "equal"], ["+", "+", "equal"], ["path", "path", "equal"], [":", ":", "equal"], ["String", "String", "equal"], ["<con>", "<con>", "equal"], ["Pool", "Pool", "equal"], [".", ".", "equal"], ["EMPTY", "EMPTY", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["String", "String", "equal"], ["target", "target", "equal"], ["=", "=", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], ["Cache", "Cache", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["(", "(", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["log", "log", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Debug", "Debug", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["log", "log", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["new", "new", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["target", "target", "equal"], ["=", "=", "equal"], ["resolve", "resolve", "equal"], ["<con>", "<con>", "equal"], ["Target", "Target", "equal"], ["(", "(", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [",", ",", "equal"], ["path", "path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["target", "target", "equal"], ["==", "==", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], ["Not", "Not", "equal"], ["<con>", "<con>", "equal"], ["Found", "Found", "equal"], ["(", "(", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [",", ",", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["return", "return", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["log", "log", "equal"], [".", ".", "equal"], ["is", "is", "equal"], ["<con>", "<con>", "equal"], ["Debug", "Debug", "equal"], ["<con>", "<con>", "equal"], ["Enabled", "Enabled", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["log", "log", "equal"], [".", ".", "equal"], ["debug", "debug", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["target", "target", "equal"], ["found", "found", "equal"], ["<con>", "<con>", "equal"], [":", ":", "equal"], ["\"", "\"", "equal"], ["+", "+", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["target", "target", "equal"], ["<con>", "<con>", "equal"], ["Cache", "Cache", "equal"], [".", ".", "equal"], ["put", "put", "equal"], ["(", "(", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["And", "And", "equal"], ["<con>", "<con>", "equal"], ["Result", "Result", "equal"], ["<con>", "<con>", "equal"], ["Path", "Path", "equal"], [",", ",", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["render", "render", "equal"], ["<con>", "<con>", "equal"], ["View", "View", "equal"], ["(", "(", "equal"], ["action", "action", "equal"], ["<con>", "<con>", "equal"], ["Request", "Request", "equal"], [",", ",", "equal"], ["target", "target", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Dispatches", "to", "the", "JSP", "location", "created", "from", "result", "value", "and", "JSP", "extension", "<con>", "."], "dst_desc_tokens": ["Dispatches", "to", "the", "template", "location", "created", "from", "result", "value", "and", "JSP", "extension", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 1802066, "full_name": "DSheirer/sdrtrunk", "commit_id": "75c54cf7660bea9826cb9b55ae819981c5beb6fe", "src_method": "public ChannelNumber getChannelNumber()\n    {\n        return ChannelNumber.fromValue(getMessage().getInt(CHANNEL_NUMBER));\n    }", "dst_method": "public int getTimeslot()\n    {\n        return getMessage().getInt(CHANNEL_NUMBER);\n    }", "src_desc": "Channel number for this ISCH", "dst_desc": "Timeslot for this ISCH", "code_change_seq": [["public", "public", "equal"], ["Channel", "int", "replace"], ["<con>", "", "delete"], ["Number", "", "delete"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Channel", "", "delete"], ["<con>", "", "delete"], ["Number", "Timeslot", "replace"], ["(", "(", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["return", "return", "equal"], ["Channel", "", "delete"], ["<con>", "", "delete"], ["Number", "", "delete"], [".", "", "delete"], ["from", "", "delete"], ["<con>", "", "delete"], ["Value", "", "delete"], ["(", "", "delete"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Message", "Message", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Int", "Int", "equal"], ["(", "(", "equal"], ["CHANNEL", "CHANNEL", "equal"], ["<con>", "<con>", "equal"], ["_", "_", "equal"], ["<con>", "<con>", "equal"], ["NUMBER", "NUMBER", "equal"], [")", ")", "equal"], [")", "", "delete"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Channel", "number", "for", "this", "ISCH"], "dst_desc_tokens": ["Timeslot", "for", "this", "ISCH"], "label": true}
{"idx": 0, "sample_id": 5445224, "full_name": "unofficial-openjdk/openjdk", "commit_id": "d3e21e8001bfa1040ef1ce99b481ce69028f79a4", "src_method": "private CompletableFuture<Response> getExceptionalCF(Throwable t) {\n        if ((t instanceof CompletionException) || (t instanceof ExecutionException)) {\n            if (t.getCause() != null) {\n                t = t.getCause();\n            }\n        }\n        if (cancelled && t instanceof IOException) {\n            t = new HttpTimeoutException(\"request timed out\");\n        }\n        return MinimalFuture.failedFuture(t);\n    }", "dst_method": "private CompletableFuture<Response> getExceptionalCF(Throwable t) {\n        if ((t instanceof CompletionException) || (t instanceof ExecutionException)) {\n            if (t.getCause() != null) {\n                t = t.getCause();\n            }\n        }\n        if (cancelled && t instanceof IOException) {\n            t = new HttpTimeoutException(\"request timed out\");\n        } else if (t instanceof ConnectionExpiredException) {\n            // allow the retry mechanism to do its work\n            // ####: method (GET,HEAD, not POST?), no bytes written or read ( differentiate? )\n            if (t.getCause() != null) retryCause = t.getCause();\n            if (!expiredOnce) {\n                DEBUG_LOGGER.log(Level.DEBUG,\n                    \"MultiExchange: ConnectionExpiredException (async): retrying...\",\n                    t);\n                expiredOnce = true;\n                return null;\n            } else {\n                DEBUG_LOGGER.log(Level.DEBUG,\n                    \"MultiExchange: ConnectionExpiredException (async): already retried once.\",\n                    t);\n                if (t.getCause() != null) t = t.getCause();\n            }\n        }\n        return failedFuture(t);\n    }", "src_desc": "Take a Throwable and return a suitable CompletableFuture that is\ncompleted exceptionally.", "dst_desc": "Takes a Throwable and returns a suitable CompletableFuture that is\ncompleted exceptionally, or null.", "code_change_seq": [["private", "private", "equal"], ["Completable", "Completable", "equal"], ["<con>", "<con>", "equal"], ["Future", "Future", "equal"], ["<", "<", "equal"], ["Response", "Response", "equal"], [">", ">", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Exceptional", "Exceptional", "equal"], ["<con>", "<con>", "equal"], ["CF", "CF", "equal"], ["(", "(", "equal"], ["Throwable", "Throwable", "equal"], ["t", "t", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], ["instanceof", "instanceof", "equal"], ["Completion", "Completion", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [")", ")", "equal"], ["||", "||", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], ["instanceof", "instanceof", "equal"], ["Execution", "Execution", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [")", ")", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cause", "Cause", "equal"], ["(", "(", "equal"], [")", ")", "equal"], ["!=", "!=", "equal"], ["null", "null", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["t", "t", "equal"], ["=", "=", "equal"], ["t", "t", "equal"], [".", ".", "equal"], ["get", "get", "equal"], ["<con>", "<con>", "equal"], ["Cause", "Cause", "equal"], ["(", "(", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["}", "}", "equal"], ["if", "if", "equal"], ["(", "(", "equal"], ["cancelled", "cancelled", "equal"], ["&&", "&&", "equal"], ["t", "t", "equal"], ["instanceof", "instanceof", "equal"], ["IO", "IO", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], [")", ")", "equal"], ["{", "{", "equal"], ["t", "t", "equal"], ["=", "=", "equal"], ["new", "new", "equal"], ["Http", "Http", "equal"], ["<con>", "<con>", "equal"], ["Timeout", "Timeout", "equal"], ["<con>", "<con>", "equal"], ["Exception", "Exception", "equal"], ["(", "(", "equal"], ["\"", "\"", "equal"], ["request", "request", "equal"], ["timed", "timed", "equal"], ["out", "out", "equal"], ["\"", "\"", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"], ["", "else", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "t", "insert"], ["", "instanceof", "insert"], ["", "Connection", "insert"], ["", "<con>", "insert"], ["", "Expired", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "t", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "retry", "insert"], ["", "<con>", "insert"], ["", "Cause", "insert"], ["", "=", "insert"], ["", "t", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "!", "insert"], ["", "expired", "insert"], ["", "<con>", "insert"], ["", "Once", "insert"], ["", ")", "insert"], ["", "{", "insert"], ["", "DEBUG", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "LOGGER", "insert"], ["", ".", "insert"], ["", "log", "insert"], ["", "(", "insert"], ["", "Level", "insert"], ["", ".", "insert"], ["", "DEBUG", "insert"], ["", ",", "insert"], ["", "\"", "insert"], ["", "Multi", "insert"], ["", "<con>", "insert"], ["", "Exchange", "insert"], ["", "<con>", "insert"], ["", ":", "insert"], ["", "Connection", "insert"], ["", "<con>", "insert"], ["", "Expired", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "<con>", "insert"], ["", "async", "insert"], ["", "<con>", "insert"], ["", ")", "insert"], ["", "<con>", "insert"], ["", ":", "insert"], ["", "retrying", "insert"], ["", "<con>", "insert"], ["", ".", "insert"], ["", "<con>", "insert"], ["", ".", "insert"], ["", "<con>", "insert"], ["", ".", "insert"], ["", "\"", "insert"], ["", ",", "insert"], ["", "t", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "expired", "insert"], ["", "<con>", "insert"], ["", "Once", "insert"], ["", "=", "insert"], ["", "true", "insert"], ["", ";", "insert"], ["return", "return", "equal"], ["Minimal", "null", "replace"], ["<con>", "", "delete"], ["Future", "", "delete"], ["", ";", "insert"], ["", "}", "insert"], ["", "else", "insert"], ["", "{", "insert"], ["", "DEBUG", "insert"], ["", "<con>", "insert"], ["", "_", "insert"], ["", "<con>", "insert"], ["", "LOGGER", "insert"], [".", ".", "equal"], ["", "log", "insert"], ["", "(", "insert"], ["", "Level", "insert"], ["", ".", "insert"], ["", "DEBUG", "insert"], ["", ",", "insert"], ["", "\"", "insert"], ["", "Multi", "insert"], ["", "<con>", "insert"], ["", "Exchange", "insert"], ["", "<con>", "insert"], ["", ":", "insert"], ["", "Connection", "insert"], ["", "<con>", "insert"], ["", "Expired", "insert"], ["", "<con>", "insert"], ["", "Exception", "insert"], ["", "(", "insert"], ["", "<con>", "insert"], ["", "async", "insert"], ["", "<con>", "insert"], ["", ")", "insert"], ["", "<con>", "insert"], ["", ":", "insert"], ["", "already", "insert"], ["", "retried", "insert"], ["", "once", "insert"], ["", "<con>", "insert"], ["", ".", "insert"], ["", "\"", "insert"], ["", ",", "insert"], ["", "t", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "if", "insert"], ["", "(", "insert"], ["", "t", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", "!=", "insert"], ["", "null", "insert"], ["", ")", "insert"], ["", "t", "insert"], ["", "=", "insert"], ["", "t", "insert"], ["", ".", "insert"], ["", "get", "insert"], ["", "<con>", "insert"], ["", "Cause", "insert"], ["", "(", "insert"], ["", ")", "insert"], ["", ";", "insert"], ["", "}", "insert"], ["", "}", "insert"], ["", "return", "insert"], ["failed", "failed", "equal"], ["<con>", "<con>", "equal"], ["Future", "Future", "equal"], ["(", "(", "equal"], ["t", "t", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["}", "}", "equal"]], "src_desc_tokens": ["Take", "a", "Throwable", "and", "return", "a", "suitable", "Completable", "<con>", "Future", "that", "is", "completed", "exceptionally", "<con>", "."], "dst_desc_tokens": ["Takes", "a", "Throwable", "and", "returns", "a", "suitable", "Completable", "<con>", "Future", "that", "is", "completed", "exceptionally", "<con>", ",", "or", "null", "<con>", "."], "label": true}
{"idx": 0, "sample_id": 3036609, "full_name": "opennetworkinglab/onos", "commit_id": "eeb4cf559e6a8c076e90d5913e9fb8b0c98c9cc3", "src_method": "static String postClis(DriverHandler handler, String cmd) {\n        RestSBController controller = checkNotNull(handler.get(RestSBController.class));\n        DeviceId deviceId = handler.data().deviceId();\n\n        String request = generate(cmd, CommandType.CLI);\n        InputStream stream = new ByteArrayInputStream(request.getBytes(StandardCharsets.UTF_8));\n        return controller.post(deviceId, API_URI, stream, MediaType.valueOf(APP_JSON_RPC), String.class);\n    }", "dst_method": "public static String postCli(DriverHandler handler, String command) {\n        return post(handler, command, CommandType.CLI);\n    }", "src_desc": "Sends NX-API request message to the device.", "dst_desc": "Sends NX-API request message to the device with CLI command.", "code_change_seq": [["", "public", "insert"], ["static", "static", "equal"], ["String", "String", "equal"], ["post", "post", "equal"], ["<con>", "<con>", "equal"], ["Clis", "Cli", "replace"], ["(", "(", "equal"], ["Driver", "Driver", "equal"], ["<con>", "<con>", "equal"], ["Handler", "Handler", "equal"], ["handler", "handler", "equal"], [",", ",", "equal"], ["String", "String", "equal"], ["cmd", "command", "replace"], [")", ")", "equal"], ["{", "{", "equal"], ["Rest", "", "delete"], ["<con>", "", "delete"], ["SB", "", "delete"], ["<con>", "", "delete"], ["Controller", "return", "replace"], ["controller", "post", "replace"], ["=", "", "delete"], ["check", "", "delete"], ["<con>", "", "delete"], ["Not", "", "delete"], ["<con>", "", "delete"], ["Null", "", "delete"], ["(", "(", "equal"], ["handler", "handler", "equal"], [".", "", "delete"], ["get", "", "delete"], ["(", "", "delete"], ["Rest", "", "delete"], ["<con>", "", "delete"], ["SB", "", "delete"], ["<con>", "", "delete"], ["Controller", "", "delete"], [".", "", "delete"], ["class", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["Device", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["device", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["=", "", "delete"], ["handler", "", "delete"], [".", "", "delete"], ["data", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [".", "", "delete"], ["device", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], ["(", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["String", "", "delete"], ["request", "", "delete"], ["=", "", "delete"], ["generate", "", "delete"], ["(", ",", "replace"], ["cmd", "command", "replace"], [",", ",", "equal"], ["Command", "Command", "equal"], ["<con>", "<con>", "equal"], ["Type", "Type", "equal"], [".", ".", "equal"], ["CLI", "CLI", "equal"], [")", ")", "equal"], [";", ";", "equal"], ["Input", "", "delete"], ["<con>", "", "delete"], ["Stream", "", "delete"], ["stream", "", "delete"], ["=", "", "delete"], ["new", "", "delete"], ["Byte", "", "delete"], ["<con>", "", "delete"], ["Array", "", "delete"], ["<con>", "", "delete"], ["Input", "", "delete"], ["<con>", "", "delete"], ["Stream", "", "delete"], ["(", "", "delete"], ["request", "", "delete"], [".", "", "delete"], ["get", "", "delete"], ["<con>", "", "delete"], ["Bytes", "", "delete"], ["(", "", "delete"], ["Standard", "", "delete"], ["<con>", "", "delete"], ["Charsets", "", "delete"], [".", "", "delete"], ["UTF", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["8", "", "delete"], [")", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["return", "", "delete"], ["controller", "", "delete"], [".", "", "delete"], ["post", "", "delete"], ["(", "", "delete"], ["device", "", "delete"], ["<con>", "", "delete"], ["Id", "", "delete"], [",", "", "delete"], ["API", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["URI", "", "delete"], [",", "", "delete"], ["stream", "", "delete"], [",", "", "delete"], ["Media", "", "delete"], ["<con>", "", "delete"], ["Type", "", "delete"], [".", "", "delete"], ["value", "", "delete"], ["<con>", "", "delete"], ["Of", "", "delete"], ["(", "", "delete"], ["APP", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["JSON", "", "delete"], ["<con>", "", "delete"], ["_", "", "delete"], ["<con>", "", "delete"], ["RPC", "", "delete"], [")", "", "delete"], [",", "", "delete"], ["String", "", "delete"], [".", "", "delete"], ["class", "", "delete"], [")", "", "delete"], [";", "", "delete"], ["}", "}", "equal"]], "src_desc_tokens": ["Sends", "NX", "<con>", "-", "<con>", "API", "request", "message", "to", "the", "device", "<con>", "."], "dst_desc_tokens": ["Sends", "NX", "<con>", "-", "<con>", "API", "request", "message", "to", "the", "device", "with", "CLI", "command", "<con>", "."], "label": true}
