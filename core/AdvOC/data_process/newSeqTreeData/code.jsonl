{"pr": "", "cid": "1_5243791", "old_code": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService coordinationService = CoordinationService.getInstance();\n            coordinationService.setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }", "new_code": "public static void writeCaseNodeData(CaseNodeData nodeData) throws CaseNodeDataException, InterruptedException {\n        try {\n            CoordinationService.getInstance().setNodeData(CoordinationService.CategoryNode.CASES, nodeData.getDirectory().toString(), nodeData.toArray());\n            \n        } catch (IOException | CoordinationServiceException ex) {\n            throw new CaseNodeDataException(String.format(\"Failed to write case node data to %s\", nodeData.getDirectory().toString().toUpperCase()), ex); //NON-NLS\n        }\n    }"}
{"pr": "", "cid": "0_4132758", "old_code": "protected PStmtKeyCPDS createKey(final String sql) {\n        return new PStmtKeyCPDS(normalizeSQL(sql));\n    }", "new_code": "protected PStmtKey createKey(final String sql) {\n        return new PStmtKey(normalizeSQL(sql), getCatalogOrNull());\n    }"}
{"pr": "", "cid": "0_4479131", "old_code": "public void forceCloseHandlesAsync() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithSASToken();\n        // BEGIN: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n        directoryAsyncClient.listHandles(10, true)\n            .subscribe(handleItem -> directoryAsyncClient.forceCloseHandles(handleItem.getHandleId(), true)\n                .subscribe(numOfClosedHandles -> System.out.printf(\"Closed %d handles.\", numOfClosedHandles)));\n        // END: com.azure.storage.file.directoryAsyncClient.forceCloseHandles\n    }", "new_code": "public void forceCloseAllHandles() {\n        DirectoryAsyncClient directoryAsyncClient = createAsyncClientWithConnectionString();\n        // BEGIN: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n        directoryAsyncClient.forceCloseAllHandles(true).subscribe(numberOfHandlesClosed ->\n            System.out.printf(\"Closed %d open handles on the directory%n\", numberOfHandlesClosed));\n        // END: com.azure.storage.file.DirectoryAsyncClient.forceCloseAllHandles#boolean\n    }"}
{"pr": "", "cid": "0_1742442", "old_code": "public final TFinalClass useProtocolsStreamImplementation(HttpStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}", "new_code": "public final TFinalClass useProtocolsStreamImplementation(FSStreamFactory factory, String... protocols) {\n\t\tfor (String protocol : protocols) {\n\t\t\tstate._streamFactoryMap.put(protocol, factory);\n\t\t}\n\t\treturn (TFinalClass) this;\n\t}"}
{"pr": "", "cid": "1_5315975", "old_code": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeMillis = System.currentTimeMillis();\n\t}", "new_code": "public void start(String taskName) throws IllegalStateException {\n\t\tif (this.currentTaskName != null) {\n\t\t\tthrow new IllegalStateException(\"Can't start StopWatch: it's already running\");\n\t\t}\n\t\tthis.currentTaskName = taskName;\n\t\tthis.startTimeNanos = System.nanoTime();\n\t}"}
{"pr": "", "cid": "0_5764055", "old_code": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n        return result;\n    }", "new_code": "public static Optional<DOI> findInText(String text) {\n        Optional<DOI> result = Optional.empty();\n\n        Matcher matcher = DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            // match only group \\1\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        matcher = SHORT_DOI_PATT.matcher(text);\n        if (matcher.find()) {\n            result = Optional.of(new DOI(matcher.group(1)));\n        }\n\n        return result;\n    }"}
{"pr": "", "cid": "1_3731867", "old_code": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        boolean defaultTypeVarLocals =\n                (atypeFactory instanceof GenericAnnotatedTypeFactory<?, ?, ?, ?>)\n                        && ((GenericAnnotatedTypeFactory<?, ?, ?, ?>) atypeFactory)\n                                .getShouldDefaultTypeVarLocals();\n        applyToTypeVar =\n                defaultTypeVarLocals\n                        && elt != null\n                        && elt.getKind() == ElementKind.LOCAL_VARIABLE\n                        && type.getKind() == TypeKind.TYPEVAR;\n        applyDefaultsElement(elt, type);\n        applyToTypeVar = false;\n    }", "new_code": "private void applyDefaults(Tree tree, AnnotatedTypeMirror type) {\n\n        // The location to take defaults from.\n        Element elt;\n        switch (tree.getKind()) {\n            case MEMBER_SELECT:\n                elt = TreeUtils.elementFromUse((MemberSelectTree) tree);\n                break;\n\n            case IDENTIFIER:\n                elt = TreeUtils.elementFromUse((IdentifierTree) tree);\n                break;\n\n            case METHOD_INVOCATION:\n                elt = TreeUtils.elementFromUse((MethodInvocationTree) tree);\n                break;\n\n                // TODO cases for array access, etc. -- every expression tree\n                // (The above probably means that we should use defaults in the\n                // scope of the declaration of the array.  Is that right?  -MDE)\n\n            case CLASS:\n                if (((ClassTree) tree).getExtendsClause() != null) {\n                    Element extendsElt =\n                            TreeUtils.elementFromTree(((ClassTree) tree).getExtendsClause());\n                    applyDefaultsToElement(extendsElt, type);\n                }\n                for (Tree implicitClause : ((ClassTree) tree).getImplementsClause()) {\n                    Element implementsElt = TreeUtils.elementFromTree(implicitClause);\n                    applyDefaultsToElement(implementsElt, type);\n                }\n                elt = nearestEnclosingExceptLocal(tree);\n                break;\n\n            default:\n                // If no associated symbol was found, use the tree's (lexical)\n                // scope.\n                elt = nearestEnclosingExceptLocal(tree);\n                // elt = nearestEnclosing(tree);\n        }\n        // System.out.println(\"applyDefaults on tree \" + tree +\n        //        \" gives elt: \" + elt + \"(\" + elt.getKind() + \")\");\n\n        applyDefaultsToElement(elt, type);\n    }"}
{"pr": "", "cid": "0_4478939", "old_code": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n        StorageServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#storageServiceProperties\n    }", "new_code": "public void setPropertiesAsyncEnableMetrics() {\n        // BEGIN: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n        QueueServiceProperties properties = client.getProperties().block();\n        properties.getMinuteMetrics().setEnabled(true);\n        properties.getHourMetrics().setEnabled(true);\n        client.setPropertiesWithResponse(properties)\n            .subscribe(response -> System.out.printf(\"Setting Queue service properties completed with status code %d\",\n                response.getStatusCode()));\n        // END: com.azure.storage.queue.queueServiceAsyncClient.setPropertiesWithResponseEnableMetrics#QueueServiceProperties\n    }"}
{"pr": "", "cid": "0_5630312", "old_code": "public void setOrganizationUrl(final String organizationUrl) {\n    this.organizationUrl = organizationUrl;\n  }", "new_code": "public Builder organizationUrl(String organizationUrl) {\n      this.organizationUrl = organizationUrl;\n      return this;\n    }"}
{"pr": "", "cid": "0_5454152", "old_code": "public SourceLocator getLocator() {\n        return locator;\n    }", "new_code": "public SourceLocator getLocator() {\n        return this.locator;\n    }"}
{"pr": "", "cid": "0_2243531", "old_code": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.proxy.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }", "new_code": "@OnClassLoadEvent(classNameRegexp = \"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\")\n    public static void patchAsmProxyClassGenerator(CtClass ctClass) throws NotFoundException, CannotCompileException {\n\n        CtMethod generateProxyClassMethod = ctClass.getDeclaredMethod(\"generateProxyClass\");\n        generateProxyClassMethod.instrument(\n                new ExprEditor() {\n                    public void edit(MethodCall m) throws CannotCompileException {\n                        if (m.getClassName().equals(\"org.apache.deltaspike.proxy.impl.AsmProxyClassGenerator\") && m.getMethodName().equals(\"loadClass\"))\n                            m.replace(\"{ $_ = org.hotswap.agent.plugin.deltaspike.command.ProxyClassLoadingDelegate.loadClass($$); }\");\n                    }\n                });\n    }"}
{"pr": "", "cid": "3_4484195", "old_code": "public VoidResponse abortCopyWithResponse(String copyId, Context context) {\n        return fileAsyncClient.abortCopyWithResponse(copyId, context).block();\n    }", "new_code": "public VoidResponse abortCopyWithResponse(String copyId, Duration timeout, Context context) {\n        Mono<VoidResponse> response = fileAsyncClient.abortCopyWithResponse(copyId, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }"}
{"pr": "", "cid": "0_2443444", "old_code": "public static InjectionManager createInjectionManager(String name, Binder... binders) {\n        return _injectionManager(name, null, binders);\n    }", "new_code": "public static InjectionManager createInjectionManager(Binder binder) {\n        return lookupInjectionManagerFactory().create(binder);\n    }"}
{"pr": "", "cid": "2_4470113", "old_code": "public Flux<FeedResponse<CosmosUserProperties>> readAllUsers(FeedOptions options) {\n        return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n            CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n    }", "new_code": "public CosmosContinuablePagedFlux<CosmosUserProperties> readAllUsers(FeedOptions options) {\n        return new CosmosContinuablePagedFlux<>(pagedFluxOptions -> {\n            setContinuationTokenAndMaxItemCount(pagedFluxOptions, options);\n            return getDocClientWrapper().readUsers(getLink(), options).map(response -> BridgeInternal.createFeedResponse(\n                CosmosUserProperties.getFromV2Results(response.getResults()), response.getResponseHeaders()));\n        });\n    }"}
{"pr": "", "cid": "3_4478865", "old_code": "public Response<Void> setPropertiesWithResponse(StorageServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }", "new_code": "public Response<Void> setPropertiesWithResponse(QueueServiceProperties properties, Duration timeout,\n        Context context) {\n        Mono<Response<Void>> response = client.setPropertiesWithResponse(properties, context);\n        return Utility.blockWithOptionalTimeout(response, timeout);\n    }"}
{"pr": "", "cid": "11_5441275", "old_code": "public final void wait(long timeout, int nanos) throws InterruptedException {\n        if (timeout < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeout++;\n        }\n\n        wait(timeout);\n    }", "new_code": "public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis < 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }"}
{"pr": "", "cid": "0_23303", "old_code": "protected boolean isProjectAccounting() {\n\t\treturn isProjectAccounting;\n\t}", "new_code": "protected boolean isUseProjectDimension() {\n\t\treturn isUseProjectDimension;\n\t}"}
{"pr": "", "cid": "0_2017735", "old_code": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }", "new_code": "private Iterable<ObjectType> getSecondaryParentObjects() {\n    if (parentSource == null) {\n      return ImmutableList.of();\n    }\n    if (parentSource.getConstructor() != null && parentSource.getConstructor().isAbstract()) {\n      return parentSource.getConstructor().getOwnImplementedInterfaces();\n    }\n    return parentSource.getCtorExtendedInterfaces();\n  }"}
{"pr": "", "cid": "2_5845329", "old_code": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    return new File(dirPath, FN_BUILD_GRADLE);\n  }", "new_code": "@NotNull\n  public static File getGradleBuildFilePath(@NotNull File dirPath) {\n    File defaultBuildFile = new File(dirPath, FN_BUILD_GRADLE);\n    if (!defaultBuildFile.isFile()) {\n      File ktsBuildFile = new File(dirPath, FN_BUILD_GRADLE_KTS);\n      if (ktsBuildFile.isFile()) {\n        return ktsBuildFile;\n      }\n    }\n    return defaultBuildFile;\n  }"}
{"pr": "", "cid": "0_5630307", "old_code": "public void setPassword(final String password) {\n    this.password = password;\n  }", "new_code": "public Builder password(String password) {\n      this.password = password;\n      return this;\n    }"}
{"pr": "", "cid": "2_2544923", "old_code": "public Matrix4d setTranslation(Vector3d xyz) {\r\n        return setTranslation(xyz.x, xyz.y, xyz.z);\r\n    }", "new_code": "public Matrix4d setTranslation(Vector3dc xyz) {\r\n        return setTranslation(xyz.x(), xyz.y(), xyz.z());\r\n    }"}
{"pr": "", "cid": "1_5321662", "old_code": "public PathMatchConfigurer addPathPrefix(String prefix, HandlerTypePredicate predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}", "new_code": "public PathMatchConfigurer addPathPrefix(String prefix, Predicate<Class<?>> predicate) {\n\t\tthis.pathPrefixes = this.pathPrefixes == null ? new LinkedHashMap<>() : this.pathPrefixes;\n\t\tthis.pathPrefixes.put(prefix, predicate);\n\t\treturn this;\n\t}"}
{"pr": "", "cid": "0_3037775", "old_code": "@Test\n    public void resilencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.cost(), is((double) 180));\n    }", "new_code": "@Test\n    public void resiliencyTest11() {\n        build4RouterTopo(true, false, false, false, 10);\n\n        List<Constraint> constraints = new LinkedList<Constraint>();\n        CostConstraint costConstraint = new CostConstraint(COST);\n        constraints.add(costConstraint);\n        PceBandwidthConstraint localBwConst = new PceBandwidthConstraint(Bandwidth.bps(10));\n        constraints.add(localBwConst);\n\n        //Setup the path , tunnel created\n        boolean result = pceManager.setupPath(D1.deviceId(), D4.deviceId(), \"T123\",\n                constraints, WITH_SIGNALLING, null);\n        assertThat(result, is(true));\n\n        List<Event> reasons = new LinkedList<>();\n        LinkEvent linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link1);\n        reasons.add(linkEvent);\n        linkEvent = new LinkEvent(LinkEvent.Type.LINK_REMOVED, link2);\n        reasons.add(linkEvent);\n\n        final TopologyEvent event = new TopologyEvent(\n                TopologyEvent.Type.TOPOLOGY_CHANGED,\n                topology,\n                reasons);\n\n        //Change Topology : remove device2 , link1 and link2\n        Set<TopologyEdge> tempEdges = new HashSet<>();\n        tempEdges.add(new DefaultTopologyEdge(D1, D2, link1));\n        tempEdges.add(new DefaultTopologyEdge(D2, D4, link2));\n        Set<TopologyVertex> tempVertexes = new HashSet<>();\n        tempVertexes.add(D2);\n        topologyService.changeInTopology(getGraph(tempVertexes, tempEdges));\n        listener.event(event);\n\n        List<Link> links = new LinkedList<>();\n        links.add(link3);\n        links.add(link4);\n\n        Path path = tunnelService.queryAllTunnels().iterator().next().path();\n\n        //Path is D1-D3-D4\n        assertThat(path.links(), is(links));\n        assertThat(path.weight(), is(ScalarWeight.toWeight(180.0)));\n    }"}
{"pr": "", "cid": "0_4482155", "old_code": "public SpecializedBlobClientBuilder containerAsyncClient(ContainerAsyncClient containerAsyncClient,\n        String blobName) {\n        pipeline(containerAsyncClient.getHttpPipeline());\n        endpoint(containerAsyncClient.getContainerUrl().toString());\n        blobName(blobName);\n        this.customerProvidedKey = containerAsyncClient.getCustomerProvidedKey();\n        return this;\n    }", "new_code": "public SpecializedBlobClientBuilder containerAsyncClient(BlobContainerAsyncClient blobContainerAsyncClient,\n        String blobName) {\n        pipeline(blobContainerAsyncClient.getHttpPipeline());\n        endpoint(blobContainerAsyncClient.getBlobContainerUrl().toString());\n        blobName(blobName);\n        this.customerProvidedKey = blobContainerAsyncClient.getCustomerProvidedKey();\n        return this;\n    }"}
{"pr": "", "cid": "0_5824363", "old_code": "@Beta\n    public This defineBinds() {\n        return configure(SqlStatements.class, s ->\n            s.setTemplateEngine(new DefineBindsTemplateEngine(s.getTemplateEngine())));\n    }", "new_code": "@Beta\n    public This defineNamedBindings(DefineNamedBindingMode mode) {\n        return configure(SqlStatements.class, s ->\n            s.setTemplateEngine(new DefineNamedBindingsTemplateEngine(mode, s.getTemplateEngine())));\n    }"}
{"pr": "", "cid": "0_4490839", "old_code": "public void createFileAsyncMaxOverload() {\n        FileAsyncClient fileAsyncClient = createAsyncClientWithSASToken();\n        // BEGIN: com.azure.storage.file.fileAsyncClient.create#long-filehttpheaders-map\n        FileHTTPHeaders httpHeaders = new FileHTTPHeaders().fileContentType(\"text/plain\");\n        fileAsyncClient.create(1024, httpHeaders, Collections.singletonMap(\"file\", \"updatedMetadata\"))\n            .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n                response.statusCode()));\n        // END: com.azure.storage.file.fileAsyncClient.create#long-filehttpheaders-map\n    }", "new_code": "public void createWithResponse() {\n        FileClient fileClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.fileClient.createWithResponse#long-filehttpheaders-map-Context\n        FileHTTPHeaders httpHeaders = new FileHTTPHeaders().fileContentType(\"text/plain\");\n        Response<FileInfo> response = fileClient.createWithResponse(1024, httpHeaders,\n            Collections.singletonMap(\"file\", \"updatedMetadata\"), new Context(key1, value1));\n        System.out.printf(\"Creating the file completed with status code %d\", response.statusCode());\n        // END: com.azure.storage.file.fileClient.createWithResponse#long-filehttpheaders-map-Context\n    }"}
{"pr": "", "cid": "0_91198", "old_code": "public void assertNotNull(AssertionInfo info, Object actual) {\r\n    if (actual != null) {\r\n      return;\r\n    }\r\n    throw failures.failure(info, shouldNotBeNull());\r\n  }", "new_code": "public void assertNotNull(Description description, Object actual) {\r\n    if (actual == null) {\r\n      throw failures.failure(description, new BasicErrorMessageFactory(\"expecting actual value to be non-null\"));\r\n    }\r\n  }"}
{"pr": "", "cid": "7_4483197", "old_code": "public VoidResponse purgeDeletedSecret(String name, Context context) {\n        return client.purgeDeletedSecret(name, context).block();\n    }", "new_code": "public Response<Void> purgeDeletedSecretWithResponse(String name, Context context) {\n        return client.purgeDeletedSecretWithResponse(name, context).block();\n    }"}
{"pr": "", "cid": "0_6104852", "old_code": "public BGFXTransientVertexBuffer decl(@NativeType(\"bgfx_vertex_decl_handle_t\") short value) { ndecl(address(), value); return this; }", "new_code": "public BGFXTransientVertexBuffer layoutHandle(@NativeType(\"bgfx_vertex_layout_handle_t\") short value) { nlayoutHandle(address(), value); return this; }"}
{"pr": "", "cid": "0_1406489", "old_code": "public static boolean isAvailable(RuleContext ruleContext, String whitelistName) {\n    String attributeName = getAttributeNameFromWhitelistName(whitelistName);\n    Preconditions.checkArgument(ruleContext.isAttrDefined(attributeName, LABEL));\n    TransitiveInfoCollection packageGroup = ruleContext.getPrerequisite(attributeName, Mode.HOST);\n    Label label = ruleContext.getLabel();\n    PackageSpecificationProvider packageSpecificationProvider =\n        packageGroup.getProvider(PackageSpecificationProvider.class);\n    requireNonNull(packageSpecificationProvider, packageGroup.getLabel().toString());\n    return Streams.stream(packageSpecificationProvider.getPackageSpecifications())\n        .anyMatch(p -> p.containsPackage(label.getPackageIdentifier()));\n  }", "new_code": "public static boolean isAvailable(RuleContext ruleContext, String whitelistName) {\n    return isAvailableFor(ruleContext, whitelistName, ruleContext.getLabel());\n  }"}
{"pr": "", "cid": "0_4087997", "old_code": "public void setCantSplitRow(boolean split) {\r\n        CTTrPr trpr = getTrPr();\r\n        CTOnOff onoff = trpr.addNewCantSplit();\r\n        onoff.setVal(split ? STOnOff.ON : STOnOff.OFF);\r\n    }", "new_code": "public void setCantSplitRow(boolean split) {\r\n        CTTrPr trpr = getTrPr();\r\n        CTOnOff onoff = (trpr.sizeOfCantSplitArray() > 0 ? trpr.getCantSplitArray(0) : trpr.addNewCantSplit());\r\n        onoff.setVal(WMLHelper.BooleanToSTOnOff(split));\r\n    }"}
{"pr": "", "cid": "0_4479882", "old_code": "public void getMessage() {\n\n        // BEGIN: com.azure.storage.queue.queueClient.getMessages\n        client.getMessages().forEach(\n            message -> {\n                System.out.println(\"Complete receiving the message: \" + message.getMessageId());\n            }\n        );\n        // END: com.azure.storage.queue.queueClient.getMessages\n    }", "new_code": "public void getMessage() {\n\n        // BEGIN: com.azure.storage.queue.queueClient.receiveMessage\n        QueueMessageItem queueMessageItem = client.receiveMessage();\n        System.out.println(\"Complete receiving the message: \" + queueMessageItem.getMessageId());\n        // END: com.azure.storage.queue.queueClient.receiveMessage\n    }"}
{"pr": "", "cid": "0_2443623", "old_code": "private static void bindDescriptor(ServiceLocator locator, DynamicConfiguration dc, ActiveDescriptor<?> activeDescriptor,\n            Set<AliasDescriptor> aliases) {\n        ActiveDescriptor<Object> boundDescriptor = dc.bind(activeDescriptor);\n        for (AliasDescriptor alias : aliases) {\n            dc.bind(createAlias(locator, boundDescriptor, alias));\n        }\n    }", "new_code": "private static void bindDescriptor(ServiceLocator locator, DynamicConfiguration dc, ActiveDescriptor<?> activeDescriptor,\n            Set<AliasBinding> aliases) {\n        ActiveDescriptor<Object> boundDescriptor = dc.bind(activeDescriptor);\n        for (AliasBinding alias : aliases) {\n            dc.bind(createAlias(locator, boundDescriptor, alias));\n        }\n    }"}
{"pr": "", "cid": "0_4827530", "old_code": "@Override\n    public INDArray exec(Accumulation accumulation, int... dimension) {\n        return processOp(accumulation).z();\n    }", "new_code": "@Override\n    public INDArray exec(ReduceOp reduceOp, int... dimension) {\n        return processOp(reduceOp).z();\n    }"}
{"pr": "", "cid": "0_1864451", "old_code": "public void setVectorCollectionFactory(VectorCollectionFactory<VecPaired<Vec, Integer>> vectorCollectionFactory)\n    {\n        this.vectorCollectionFactory = vectorCollectionFactory;\n    }", "new_code": "public void setVectorCollectionFactory(VectorCollection<VecPaired<Vec, Integer>> vc)\n    {\n        this.vc = vc;\n    }"}
{"pr": "", "cid": "0_307611", "old_code": "public static <T> LazyPVectorX<T> fromStream(Stream<T> stream) {\n        Reducer<PVector<T>> v = toPVector();\n        return new LazyPVectorX<T>(null, ReactiveSeq.fromStream(stream),v, Evaluation.LAZY);\n    }", "new_code": "public static <T> LazyPersistentListX<T> fromStream(Stream<T> stream) {\n        Reducer<PersistentList<T>> v = toPersistentList();\n        return new LazyPersistentListX<T>(null, ReactiveSeq.fromStream(stream),v, Evaluation.LAZY);\n    }"}
{"pr": "", "cid": "0_3365653", "old_code": "public static synchronized SyncSession getSession(SyncConfiguration syncConfiguration) {\n        // This will not create a new native (Object Store) session, this will only associate a Realm's path\n        // with a SyncSession. Object Store's SyncManager is responsible of the life cycle (including creation)\n        // of the native session, the provided Java wrap, helps interact with the native session, when reporting error\n        // or requesting an access_token for example.\n\n        //noinspection ConstantConditions\n        if (syncConfiguration == null) {\n            throw new IllegalArgumentException(\"A non-empty 'syncConfiguration' is required.\");\n        }\n\n        SyncSession session = sessions.get(syncConfiguration.getPath());\n        if (session == null) {\n            session = new SyncSession(syncConfiguration);\n            sessions.put(syncConfiguration.getPath(), session);\n            if (sessions.size() == 1) {\n                RealmLog.debug(\"first session created add network listener\");\n                NetworkStateReceiver.addListener(networkListener);\n            }\n        }\n\n        return session;\n    }", "new_code": "public static synchronized SyncSession getSession(SyncConfiguration syncConfiguration) throws IllegalStateException {\n        //noinspection ConstantConditions\n        if (syncConfiguration == null) {\n            throw new IllegalArgumentException(\"A non-empty 'syncConfiguration' is required.\");\n        }\n\n        SyncSession session = sessions.get(syncConfiguration.getPath());\n        if (session == null) {\n            throw new IllegalStateException(\"No SyncSession found using the path : \" + syncConfiguration.getPath()\n            + \"\\nplease ensure to call this method after you've open the Realm\");\n        }\n\n        return session;\n    }"}
{"pr": "", "cid": "0_4484242", "old_code": "public void deleteFileWithResponse() {\n        DirectoryClient directoryClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.directoryClient.deleteFileWithResponse#string-Context\n        VoidResponse response = directoryClient.deleteFileWithResponse(\"myfile\", new Context(key1, value1));\n        System.out.println(\"Completed deleting the file with status code: \" + response.statusCode());\n        // END: com.azure.storage.file.directoryClient.deleteFileWithResponse#string-Context\n    }", "new_code": "public void deleteFileWithResponse() {\n        DirectoryClient directoryClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.file.DirectoryClient.deleteFileWithResponse#string-duration-context\n        VoidResponse response = directoryClient.deleteFileWithResponse(\"myfile\",\n            Duration.ofSeconds(1), new Context(key1, value1));\n        System.out.println(\"Completed deleting the file with status code: \" + response.statusCode());\n        // END: com.azure.storage.file.DirectoryClient.deleteFileWithResponse#string-duration-context\n    }"}
{"pr": "", "cid": "0_5630351", "old_code": "public void setOverwrite(final Boolean overwrite) {\n    this.overwrite = overwrite;\n  }", "new_code": "public Builder overwrite(Boolean overwrite) {\n      this.overwrite = overwrite;\n      return this;\n    }"}
{"pr": "", "cid": "9_4476809", "old_code": "public Key createRsaKey(RsaKeyCreateOptions rsaKeyCreateOptions) {\n        return createRsaKeyWithResponse(rsaKeyCreateOptions, Context.NONE).getValue();\n    }", "new_code": "public KeyVaultKey createRsaKey(CreateRsaKeyOptions createRsaKeyOptions) {\n        return createRsaKeyWithResponse(createRsaKeyOptions, Context.NONE).getValue();\n    }"}
{"pr": "", "cid": "0_4617641", "old_code": "@Test\n  public void queueTest() {\n    final int n = 2_000_000, k = n / 100;\n    Array seq = Array.empty();\n    for(int i = 0; i < k; i++) seq = seq.cons(Int.get(i));\n\n    for(int i = k; i < n; i++) {\n      assertEquals(k, seq.arraySize());\n      assertEquals(i - k, ((Int) seq.last()).itr());\n      seq = seq.init();\n      seq = seq.cons(Int.get(i));\n    }\n\n    assertEquals(k, seq.arraySize());\n    for(int i = 0; i < k; i++) {\n      assertEquals(n - k + i, ((Int) seq.last()).itr());\n      seq = seq.init();\n      assertEquals(k - i - 1, seq.arraySize());\n    }\n\n    assertTrue(seq.isEmptyArray());\n  }", "new_code": "@Test\n  public void queueTest() {\n    final int n = 2_000_000, k = n / 100;\n    XQArray seq = XQArray.empty();\n    for(int i = 0; i < k; i++) seq = seq.cons(Int.get(i));\n\n    for(int i = k; i < n; i++) {\n      assertEquals(k, seq.arraySize());\n      assertEquals(i - k, ((Int) seq.last()).itr());\n      seq = seq.init();\n      seq = seq.cons(Int.get(i));\n    }\n\n    assertEquals(k, seq.arraySize());\n    for(int i = 0; i < k; i++) {\n      assertEquals(n - k + i, ((Int) seq.last()).itr());\n      seq = seq.init();\n      assertEquals(k - i - 1, seq.arraySize());\n    }\n\n    assertTrue(seq.isEmptyArray());\n  }"}
{"pr": "", "cid": "0_4360971", "old_code": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {\n        if (!filters.contains(filter)) {\n            filters.addFirst(filter);\n        }\n        return this;\n    }", "new_code": "public AtmosphereInterceptorWriter interceptor(AsyncIOInterceptor filter) {\n        if (!filters.contains(filter)) {\n            filters.addLast(filter);\n        }\n        return this;\n    }"}
{"pr": "", "cid": "0_3630733", "old_code": "public void createPiiToken(\n            @NonNull final String personalId,\n            @NonNull final ApiResultCallback<Token> callback) {\n        createPiiToken(personalId, mDefaultPublishableKey, null, callback);\n    }", "new_code": "public void createPiiToken(\n            @NonNull final String personalId,\n            @NonNull final ApiResultCallback<Token> callback) {\n        createTokenFromParams(\n                new PiiTokenParams(personalId).toParamMap(),\n                mDefaultPublishableKey,\n                Token.TokenType.PII,\n                null,\n                callback);\n    }"}
{"pr": "", "cid": "0_1864721", "old_code": "@Test\n    public void testTrainC_ClassificationDataSet_ExecutorService()\n    {\n        System.out.println(\"trainC\");\n        ClassificationDataSet train = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        LogisticRegressionDCD lr = new LogisticRegressionDCD();\n        lr.trainC(train, ex);\n        \n        ClassificationDataSet test = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        for(DataPointPair<Integer> dpp : test.getAsDPPList())\n            assertEquals(dpp.getPair().longValue(), lr.classify(dpp.getDataPoint()).mostLikely());\n    }", "new_code": "@Test\n    public void testTrainC_ClassificationDataSet_ExecutorService()\n    {\n        System.out.println(\"trainC\");\n        ClassificationDataSet train = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        LogisticRegressionDCD lr = new LogisticRegressionDCD();\n        lr.train(train, true);\n        \n        ClassificationDataSet test = FixedProblems.get2ClassLinear(200, RandomUtil.getRandom());\n        \n        for(DataPointPair<Integer> dpp : test.getAsDPPList())\n            assertEquals(dpp.getPair().longValue(), lr.classify(dpp.getDataPoint()).mostLikely());\n    }"}
{"pr": "", "cid": "0_4491178", "old_code": "public void enqueueMessageWithTimeoutOverload() {\n        QueueClient queueClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.queue.queueClient.enqueueMessage#string-duration-duration\n        EnqueuedMessage enqueuedMessage = queueClient.enqueueMessage(\"Hello, Azure\",\n            Duration.ofSeconds(5), null).value();\n        System.out.printf(\"Message %s expires at %s\", enqueuedMessage.messageId(), enqueuedMessage.expirationTime());\n        // END: com.azure.storage.queue.queueClient.enqueueMessage#string-duration-duration\n    }", "new_code": "public void enqueueMessageWithTimeoutOverload() {\n        QueueClient queueClient = createClientWithSASToken();\n        // BEGIN: com.azure.storage.queue.queueClient.enqueueMessageWithResponse#string-duration-duration-Context\n        EnqueuedMessage enqueuedMessage = queueClient.enqueueMessageWithResponse(\"Hello, Azure\",\n            Duration.ofSeconds(5), null, new Context(key1, value1)).value();\n        System.out.printf(\"Message %s expires at %s\", enqueuedMessage.messageId(), enqueuedMessage.expirationTime());\n        // END: com.azure.storage.queue.queueClient.enqueueMessageWithResponse#string-duration-duration-Context\n    }"}
{"pr": "", "cid": "0_19726", "old_code": "protected Timestamp getStatementdate() {\n\t\treturn statementdate;\n\t}", "new_code": "protected Timestamp getStatementDate() {\n\t\treturn statementDate;\n\t}"}
{"pr": "", "cid": "0_2887425", "old_code": "@Override\n\tpublic void render(final ActionRequest actionRequest, final T resultValue) throws Exception {\n\t\tString resultBasePath = actionRequest.getActionRuntime().getResultBasePath();\n\n\t\tfinal String path = resultValue != null ? resultValue.path() : StringPool.EMPTY;\n\n\t\tString actionAndResultPath = resultBasePath + (resultValue != null ? ':' + path : StringPool.EMPTY);\n\n\t\tString target = targetCache.get(actionAndResultPath);\n\n\t\tif (target == null) {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"new target: \" + actionAndResultPath);\n\t\t\t}\n\n\t\t\ttarget = resolveTarget(actionRequest, path);\n\n\t\t\tif (target == null) {\n\t\t\t\ttargetNotFound(actionRequest, actionAndResultPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"target found: \" + target);\n\t\t\t}\n\n\t\t\t// store target in cache\n\t\t\ttargetCache.put(actionAndResultPath, target);\n\t\t}\n\n\t\t// the target exists, continue\n\t\trenderView(actionRequest, target);\n\t}", "new_code": "@Override\n\tpublic void render(final ActionRequest actionRequest, final Object resultValue) throws Exception {\n\t\tfinal PathResult pathResult;\n\n\t\tif (resultValue == null) {\n\t\t\tpathResult = resultOf(StringPool.EMPTY);\n\t\t} else {\n\t\t\tif (resultValue instanceof String) {\n\t\t\t\tpathResult = resultOf(resultValue);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpathResult = (PathResult) resultValue;\n\t\t\t}\n\t\t}\n\n\t\tfinal String resultBasePath = actionRequest.getActionRuntime().getResultBasePath();\n\n\t\tfinal String path = pathResult != null ? pathResult.path() : StringPool.EMPTY;\n\n\t\tfinal String actionAndResultPath = resultBasePath + (pathResult != null ? ':' + path : StringPool.EMPTY);\n\n\t\tString target = targetCache.get(actionAndResultPath);\n\n\t\tif (target == null) {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"new target: \" + actionAndResultPath);\n\t\t\t}\n\n\t\t\ttarget = resolveTarget(actionRequest, path);\n\n\t\t\tif (target == null) {\n\t\t\t\ttargetNotFound(actionRequest, actionAndResultPath);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"target found: \" + target);\n\t\t\t}\n\n\t\t\t// store target in cache\n\t\t\ttargetCache.put(actionAndResultPath, target);\n\t\t}\n\n\t\t// the target exists, continue\n\t\trenderView(actionRequest, target);\n\t}"}
{"pr": "", "cid": "0_1802066", "old_code": "public ChannelNumber getChannelNumber()\n    {\n        return ChannelNumber.fromValue(getMessage().getInt(CHANNEL_NUMBER));\n    }", "new_code": "public int getTimeslot()\n    {\n        return getMessage().getInt(CHANNEL_NUMBER);\n    }"}
{"pr": "", "cid": "0_5445224", "old_code": "private CompletableFuture<Response> getExceptionalCF(Throwable t) {\n        if ((t instanceof CompletionException) || (t instanceof ExecutionException)) {\n            if (t.getCause() != null) {\n                t = t.getCause();\n            }\n        }\n        if (cancelled && t instanceof IOException) {\n            t = new HttpTimeoutException(\"request timed out\");\n        }\n        return MinimalFuture.failedFuture(t);\n    }", "new_code": "private CompletableFuture<Response> getExceptionalCF(Throwable t) {\n        if ((t instanceof CompletionException) || (t instanceof ExecutionException)) {\n            if (t.getCause() != null) {\n                t = t.getCause();\n            }\n        }\n        if (cancelled && t instanceof IOException) {\n            t = new HttpTimeoutException(\"request timed out\");\n        } else if (t instanceof ConnectionExpiredException) {\n            // allow the retry mechanism to do its work\n            // ####: method (GET,HEAD, not POST?), no bytes written or read ( differentiate? )\n            if (t.getCause() != null) retryCause = t.getCause();\n            if (!expiredOnce) {\n                DEBUG_LOGGER.log(Level.DEBUG,\n                    \"MultiExchange: ConnectionExpiredException (async): retrying...\",\n                    t);\n                expiredOnce = true;\n                return null;\n            } else {\n                DEBUG_LOGGER.log(Level.DEBUG,\n                    \"MultiExchange: ConnectionExpiredException (async): already retried once.\",\n                    t);\n                if (t.getCause() != null) t = t.getCause();\n            }\n        }\n        return failedFuture(t);\n    }"}
{"pr": "", "cid": "0_3036609", "old_code": "static String postClis(DriverHandler handler, String cmd) {\n        RestSBController controller = checkNotNull(handler.get(RestSBController.class));\n        DeviceId deviceId = handler.data().deviceId();\n\n        String request = generate(cmd, CommandType.CLI);\n        InputStream stream = new ByteArrayInputStream(request.getBytes(StandardCharsets.UTF_8));\n        return controller.post(deviceId, API_URI, stream, MediaType.valueOf(APP_JSON_RPC), String.class);\n    }", "new_code": "public static String postCli(DriverHandler handler, String command) {\n        return post(handler, command, CommandType.CLI);\n    }"}
